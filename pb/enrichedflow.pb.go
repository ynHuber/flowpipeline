// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v3.21.12
// source: enrichedflow.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EnrichedFlow_FlowType int32

const (
	EnrichedFlow_FLOWUNKNOWN EnrichedFlow_FlowType = 0
	EnrichedFlow_SFLOW_5     EnrichedFlow_FlowType = 1
	EnrichedFlow_NETFLOW_V5  EnrichedFlow_FlowType = 2
	EnrichedFlow_NETFLOW_V9  EnrichedFlow_FlowType = 3
	EnrichedFlow_IPFIX       EnrichedFlow_FlowType = 4
	EnrichedFlow_EBPF        EnrichedFlow_FlowType = 5
)

// Enum value maps for EnrichedFlow_FlowType.
var (
	EnrichedFlow_FlowType_name = map[int32]string{
		0: "FLOWUNKNOWN",
		1: "SFLOW_5",
		2: "NETFLOW_V5",
		3: "NETFLOW_V9",
		4: "IPFIX",
		5: "EBPF",
	}
	EnrichedFlow_FlowType_value = map[string]int32{
		"FLOWUNKNOWN": 0,
		"SFLOW_5":     1,
		"NETFLOW_V5":  2,
		"NETFLOW_V9":  3,
		"IPFIX":       4,
		"EBPF":        5,
	}
)

func (x EnrichedFlow_FlowType) Enum() *EnrichedFlow_FlowType {
	p := new(EnrichedFlow_FlowType)
	*p = x
	return p
}

func (x EnrichedFlow_FlowType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnrichedFlow_FlowType) Descriptor() protoreflect.EnumDescriptor {
	return file_enrichedflow_proto_enumTypes[0].Descriptor()
}

func (EnrichedFlow_FlowType) Type() protoreflect.EnumType {
	return &file_enrichedflow_proto_enumTypes[0]
}

func (x EnrichedFlow_FlowType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnrichedFlow_FlowType.Descriptor instead.
func (EnrichedFlow_FlowType) EnumDescriptor() ([]byte, []int) {
	return file_enrichedflow_proto_rawDescGZIP(), []int{0, 0}
}

// Encapsulation
type EnrichedFlow_LayerStack int32

const (
	EnrichedFlow_Ethernet           EnrichedFlow_LayerStack = 0
	EnrichedFlow_IPv4               EnrichedFlow_LayerStack = 1
	EnrichedFlow_IPv6               EnrichedFlow_LayerStack = 2
	EnrichedFlow_TCP                EnrichedFlow_LayerStack = 3
	EnrichedFlow_UDP                EnrichedFlow_LayerStack = 4
	EnrichedFlow_MPLS               EnrichedFlow_LayerStack = 5
	EnrichedFlow_Dot1Q              EnrichedFlow_LayerStack = 6
	EnrichedFlow_ICMP               EnrichedFlow_LayerStack = 7
	EnrichedFlow_ICMPv6             EnrichedFlow_LayerStack = 8
	EnrichedFlow_GRE                EnrichedFlow_LayerStack = 9
	EnrichedFlow_IPv6HeaderRouting  EnrichedFlow_LayerStack = 10
	EnrichedFlow_IPv6HeaderFragment EnrichedFlow_LayerStack = 11
	EnrichedFlow_Geneve             EnrichedFlow_LayerStack = 12
	EnrichedFlow_Teredo             EnrichedFlow_LayerStack = 13
	EnrichedFlow_Custom             EnrichedFlow_LayerStack = 99 // todo: add nsh
)

// Enum value maps for EnrichedFlow_LayerStack.
var (
	EnrichedFlow_LayerStack_name = map[int32]string{
		0:  "Ethernet",
		1:  "IPv4",
		2:  "IPv6",
		3:  "TCP",
		4:  "UDP",
		5:  "MPLS",
		6:  "Dot1Q",
		7:  "ICMP",
		8:  "ICMPv6",
		9:  "GRE",
		10: "IPv6HeaderRouting",
		11: "IPv6HeaderFragment",
		12: "Geneve",
		13: "Teredo",
		99: "Custom",
	}
	EnrichedFlow_LayerStack_value = map[string]int32{
		"Ethernet":           0,
		"IPv4":               1,
		"IPv6":               2,
		"TCP":                3,
		"UDP":                4,
		"MPLS":               5,
		"Dot1Q":              6,
		"ICMP":               7,
		"ICMPv6":             8,
		"GRE":                9,
		"IPv6HeaderRouting":  10,
		"IPv6HeaderFragment": 11,
		"Geneve":             12,
		"Teredo":             13,
		"Custom":             99,
	}
)

func (x EnrichedFlow_LayerStack) Enum() *EnrichedFlow_LayerStack {
	p := new(EnrichedFlow_LayerStack)
	*p = x
	return p
}

func (x EnrichedFlow_LayerStack) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnrichedFlow_LayerStack) Descriptor() protoreflect.EnumDescriptor {
	return file_enrichedflow_proto_enumTypes[1].Descriptor()
}

func (EnrichedFlow_LayerStack) Type() protoreflect.EnumType {
	return &file_enrichedflow_proto_enumTypes[1]
}

func (x EnrichedFlow_LayerStack) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnrichedFlow_LayerStack.Descriptor instead.
func (EnrichedFlow_LayerStack) EnumDescriptor() ([]byte, []int) {
	return file_enrichedflow_proto_rawDescGZIP(), []int{0, 1}
}

// modify/anonymize
type EnrichedFlow_AnonymizedType int32

const (
	EnrichedFlow_NotAnonymized EnrichedFlow_AnonymizedType = 0
	EnrichedFlow_CryptoPAN     EnrichedFlow_AnonymizedType = 1
)

// Enum value maps for EnrichedFlow_AnonymizedType.
var (
	EnrichedFlow_AnonymizedType_name = map[int32]string{
		0: "NotAnonymized",
		1: "CryptoPAN",
	}
	EnrichedFlow_AnonymizedType_value = map[string]int32{
		"NotAnonymized": 0,
		"CryptoPAN":     1,
	}
)

func (x EnrichedFlow_AnonymizedType) Enum() *EnrichedFlow_AnonymizedType {
	p := new(EnrichedFlow_AnonymizedType)
	*p = x
	return p
}

func (x EnrichedFlow_AnonymizedType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnrichedFlow_AnonymizedType) Descriptor() protoreflect.EnumDescriptor {
	return file_enrichedflow_proto_enumTypes[2].Descriptor()
}

func (EnrichedFlow_AnonymizedType) Type() protoreflect.EnumType {
	return &file_enrichedflow_proto_enumTypes[2]
}

func (x EnrichedFlow_AnonymizedType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnrichedFlow_AnonymizedType.Descriptor instead.
func (EnrichedFlow_AnonymizedType) EnumDescriptor() ([]byte, []int) {
	return file_enrichedflow_proto_rawDescGZIP(), []int{0, 2}
}

type EnrichedFlow_ValidationStatusType int32

const (
	EnrichedFlow_Unknown  EnrichedFlow_ValidationStatusType = 0
	EnrichedFlow_Valid    EnrichedFlow_ValidationStatusType = 1
	EnrichedFlow_NotFound EnrichedFlow_ValidationStatusType = 2
	EnrichedFlow_Invalid  EnrichedFlow_ValidationStatusType = 3
)

// Enum value maps for EnrichedFlow_ValidationStatusType.
var (
	EnrichedFlow_ValidationStatusType_name = map[int32]string{
		0: "Unknown",
		1: "Valid",
		2: "NotFound",
		3: "Invalid",
	}
	EnrichedFlow_ValidationStatusType_value = map[string]int32{
		"Unknown":  0,
		"Valid":    1,
		"NotFound": 2,
		"Invalid":  3,
	}
)

func (x EnrichedFlow_ValidationStatusType) Enum() *EnrichedFlow_ValidationStatusType {
	p := new(EnrichedFlow_ValidationStatusType)
	*p = x
	return p
}

func (x EnrichedFlow_ValidationStatusType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnrichedFlow_ValidationStatusType) Descriptor() protoreflect.EnumDescriptor {
	return file_enrichedflow_proto_enumTypes[3].Descriptor()
}

func (EnrichedFlow_ValidationStatusType) Type() protoreflect.EnumType {
	return &file_enrichedflow_proto_enumTypes[3]
}

func (x EnrichedFlow_ValidationStatusType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnrichedFlow_ValidationStatusType.Descriptor instead.
func (EnrichedFlow_ValidationStatusType) EnumDescriptor() ([]byte, []int) {
	return file_enrichedflow_proto_rawDescGZIP(), []int{0, 3}
}

// modify/normalize
type EnrichedFlow_NormalizedType int32

const (
	EnrichedFlow_No  EnrichedFlow_NormalizedType = 0
	EnrichedFlow_Yes EnrichedFlow_NormalizedType = 1
)

// Enum value maps for EnrichedFlow_NormalizedType.
var (
	EnrichedFlow_NormalizedType_name = map[int32]string{
		0: "No",
		1: "Yes",
	}
	EnrichedFlow_NormalizedType_value = map[string]int32{
		"No":  0,
		"Yes": 1,
	}
)

func (x EnrichedFlow_NormalizedType) Enum() *EnrichedFlow_NormalizedType {
	p := new(EnrichedFlow_NormalizedType)
	*p = x
	return p
}

func (x EnrichedFlow_NormalizedType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnrichedFlow_NormalizedType) Descriptor() protoreflect.EnumDescriptor {
	return file_enrichedflow_proto_enumTypes[4].Descriptor()
}

func (EnrichedFlow_NormalizedType) Type() protoreflect.EnumType {
	return &file_enrichedflow_proto_enumTypes[4]
}

func (x EnrichedFlow_NormalizedType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnrichedFlow_NormalizedType.Descriptor instead.
func (EnrichedFlow_NormalizedType) EnumDescriptor() ([]byte, []int) {
	return file_enrichedflow_proto_rawDescGZIP(), []int{0, 4}
}

// modify/remoteaddress
type EnrichedFlow_RemoteAddrType int32

const (
	EnrichedFlow_Neither EnrichedFlow_RemoteAddrType = 0
	EnrichedFlow_Src     EnrichedFlow_RemoteAddrType = 1
	EnrichedFlow_Dst     EnrichedFlow_RemoteAddrType = 2
)

// Enum value maps for EnrichedFlow_RemoteAddrType.
var (
	EnrichedFlow_RemoteAddrType_name = map[int32]string{
		0: "Neither",
		1: "Src",
		2: "Dst",
	}
	EnrichedFlow_RemoteAddrType_value = map[string]int32{
		"Neither": 0,
		"Src":     1,
		"Dst":     2,
	}
)

func (x EnrichedFlow_RemoteAddrType) Enum() *EnrichedFlow_RemoteAddrType {
	p := new(EnrichedFlow_RemoteAddrType)
	*p = x
	return p
}

func (x EnrichedFlow_RemoteAddrType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnrichedFlow_RemoteAddrType) Descriptor() protoreflect.EnumDescriptor {
	return file_enrichedflow_proto_enumTypes[5].Descriptor()
}

func (EnrichedFlow_RemoteAddrType) Type() protoreflect.EnumType {
	return &file_enrichedflow_proto_enumTypes[5]
}

func (x EnrichedFlow_RemoteAddrType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnrichedFlow_RemoteAddrType.Descriptor instead.
func (EnrichedFlow_RemoteAddrType) EnumDescriptor() ([]byte, []int) {
	return file_enrichedflow_proto_rawDescGZIP(), []int{0, 5}
}

type EnrichedFlow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type            EnrichedFlow_FlowType `protobuf:"varint,1,opt,name=type,proto3,enum=flowpb.EnrichedFlow_FlowType" json:"type,omitempty"`
	TimeReceived    uint64                `protobuf:"varint,2,opt,name=time_received,json=timeReceived,proto3" json:"time_received,omitempty"`
	TimeReceivedNs  uint64                `protobuf:"varint,110,opt,name=time_received_ns,json=timeReceivedNs,proto3" json:"time_received_ns,omitempty"`
	SequenceNum     uint32                `protobuf:"varint,4,opt,name=sequence_num,json=sequenceNum,proto3" json:"sequence_num,omitempty"`
	SamplingRate    uint64                `protobuf:"varint,3,opt,name=sampling_rate,json=samplingRate,proto3" json:"sampling_rate,omitempty"`
	FlowDirection   uint32                `protobuf:"varint,42,opt,name=flow_direction,json=flowDirection,proto3" json:"flow_direction,omitempty"`
	TimeFlowStartNs uint64                `protobuf:"varint,111,opt,name=time_flow_start_ns,json=timeFlowStartNs,proto3" json:"time_flow_start_ns,omitempty"`
	TimeFlowEndNs   uint64                `protobuf:"varint,112,opt,name=time_flow_end_ns,json=timeFlowEndNs,proto3" json:"time_flow_end_ns,omitempty"`
	// Sampler information
	SamplerAddress []byte `protobuf:"bytes,11,opt,name=sampler_address,json=samplerAddress,proto3" json:"sampler_address,omitempty"`
	// Found inside packet
	TimeFlowEnd     uint64 `protobuf:"varint,5,opt,name=time_flow_end,json=timeFlowEnd,proto3" json:"time_flow_end,omitempty"`
	TimeFlowStartMs uint64 `protobuf:"varint,63,opt,name=time_flow_start_ms,json=timeFlowStartMs,proto3" json:"time_flow_start_ms,omitempty"`
	TimeFlowEndMs   uint64 `protobuf:"varint,64,opt,name=time_flow_end_ms,json=timeFlowEndMs,proto3" json:"time_flow_end_ms,omitempty"`
	// Size of the sampled packet
	Bytes   uint64 `protobuf:"varint,9,opt,name=bytes,proto3" json:"bytes,omitempty"`
	Packets uint64 `protobuf:"varint,10,opt,name=packets,proto3" json:"packets,omitempty"`
	// Source/destination addresses
	SrcAddr []byte `protobuf:"bytes,6,opt,name=src_addr,json=srcAddr,proto3" json:"src_addr,omitempty"`
	DstAddr []byte `protobuf:"bytes,7,opt,name=dst_addr,json=dstAddr,proto3" json:"dst_addr,omitempty"`
	// Layer 3 protocol (IPv4/IPv6/ARP/MPLS...)
	Etype uint32 `protobuf:"varint,30,opt,name=etype,proto3" json:"etype,omitempty"`
	// Layer 4 protocol
	Proto uint32 `protobuf:"varint,20,opt,name=proto,proto3" json:"proto,omitempty"`
	// Ports for UDP and TCP
	SrcPort uint32 `protobuf:"varint,21,opt,name=src_port,json=srcPort,proto3" json:"src_port,omitempty"`
	DstPort uint32 `protobuf:"varint,22,opt,name=dst_port,json=dstPort,proto3" json:"dst_port,omitempty"`
	// Interfaces
	InIf  uint32 `protobuf:"varint,18,opt,name=in_if,json=inIf,proto3" json:"in_if,omitempty"`
	OutIf uint32 `protobuf:"varint,19,opt,name=out_if,json=outIf,proto3" json:"out_if,omitempty"`
	// Ethernet information
	SrcMac uint64 `protobuf:"varint,27,opt,name=src_mac,json=srcMac,proto3" json:"src_mac,omitempty"`
	DstMac uint64 `protobuf:"varint,28,opt,name=dst_mac,json=dstMac,proto3" json:"dst_mac,omitempty"`
	// Vlan
	SrcVlan uint32 `protobuf:"varint,33,opt,name=src_vlan,json=srcVlan,proto3" json:"src_vlan,omitempty"`
	DstVlan uint32 `protobuf:"varint,34,opt,name=dst_vlan,json=dstVlan,proto3" json:"dst_vlan,omitempty"`
	// 802.1q VLAN in sampled packet
	VlanId uint32 `protobuf:"varint,29,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
	// VRF
	IngressVrfId uint32 `protobuf:"varint,39,opt,name=ingress_vrf_id,json=ingressVrfId,proto3" json:"ingress_vrf_id,omitempty"`
	EgressVrfId  uint32 `protobuf:"varint,40,opt,name=egress_vrf_id,json=egressVrfId,proto3" json:"egress_vrf_id,omitempty"`
	// IP and TCP special flags
	IpTos            uint32 `protobuf:"varint,23,opt,name=ip_tos,json=ipTos,proto3" json:"ip_tos,omitempty"`
	ForwardingStatus uint32 `protobuf:"varint,24,opt,name=forwarding_status,json=forwardingStatus,proto3" json:"forwarding_status,omitempty"`
	IpTtl            uint32 `protobuf:"varint,25,opt,name=ip_ttl,json=ipTtl,proto3" json:"ip_ttl,omitempty"`
	IpFlags          uint32 `protobuf:"varint,38,opt,name=ip_flags,json=ipFlags,proto3" json:"ip_flags,omitempty"`
	TcpFlags         uint32 `protobuf:"varint,26,opt,name=tcp_flags,json=tcpFlags,proto3" json:"tcp_flags,omitempty"`
	IcmpType         uint32 `protobuf:"varint,31,opt,name=icmp_type,json=icmpType,proto3" json:"icmp_type,omitempty"`
	IcmpCode         uint32 `protobuf:"varint,32,opt,name=icmp_code,json=icmpCode,proto3" json:"icmp_code,omitempty"`
	Ipv6FlowLabel    uint32 `protobuf:"varint,37,opt,name=ipv6_flow_label,json=ipv6FlowLabel,proto3" json:"ipv6_flow_label,omitempty"`
	// Fragments (IPv4/IPv6)
	FragmentId      uint32 `protobuf:"varint,35,opt,name=fragment_id,json=fragmentId,proto3" json:"fragment_id,omitempty"`
	FragmentOffset  uint32 `protobuf:"varint,36,opt,name=fragment_offset,json=fragmentOffset,proto3" json:"fragment_offset,omitempty"`
	BiFlowDirection uint32 `protobuf:"varint,41,opt,name=bi_flow_direction,json=biFlowDirection,proto3" json:"bi_flow_direction,omitempty"`
	// Autonomous system information
	SrcAs     uint32 `protobuf:"varint,14,opt,name=src_as,json=srcAs,proto3" json:"src_as,omitempty"`
	DstAs     uint32 `protobuf:"varint,15,opt,name=dst_as,json=dstAs,proto3" json:"dst_as,omitempty"`
	NextHop   []byte `protobuf:"bytes,12,opt,name=next_hop,json=nextHop,proto3" json:"next_hop,omitempty"`
	NextHopAs uint32 `protobuf:"varint,13,opt,name=next_hop_as,json=nextHopAs,proto3" json:"next_hop_as,omitempty"`
	// Prefix size
	SrcNet uint32 `protobuf:"varint,16,opt,name=src_net,json=srcNet,proto3" json:"src_net,omitempty"`
	DstNet uint32 `protobuf:"varint,17,opt,name=dst_net,json=dstNet,proto3" json:"dst_net,omitempty"`
	// BGP information
	BgpNextHop     []byte   `protobuf:"bytes,100,opt,name=bgp_next_hop,json=bgpNextHop,proto3" json:"bgp_next_hop,omitempty"`
	BgpCommunities []uint32 `protobuf:"varint,101,rep,packed,name=bgp_communities,json=bgpCommunities,proto3" json:"bgp_communities,omitempty"`
	AsPath         []uint32 `protobuf:"varint,102,rep,packed,name=as_path,json=asPath,proto3" json:"as_path,omitempty"`
	// MPLS information
	MplsTtl                    []uint32                  `protobuf:"varint,80,rep,packed,name=mpls_ttl,json=mplsTtl,proto3" json:"mpls_ttl,omitempty"`
	MplsLabel                  []uint32                  `protobuf:"varint,81,rep,packed,name=mpls_label,json=mplsLabel,proto3" json:"mpls_label,omitempty"`
	MplsIp                     [][]byte                  `protobuf:"bytes,82,rep,name=mpls_ip,json=mplsIp,proto3" json:"mpls_ip,omitempty"`
	HasMpls                    bool                      `protobuf:"varint,53,opt,name=has_mpls,json=hasMpls,proto3" json:"has_mpls,omitempty"`
	MplsCount                  uint32                    `protobuf:"varint,54,opt,name=mpls_count,json=mplsCount,proto3" json:"mpls_count,omitempty"`
	Mpls_1Ttl                  uint32                    `protobuf:"varint,55,opt,name=mpls_1_ttl,json=mpls1Ttl,proto3" json:"mpls_1_ttl,omitempty"`                // First TTL
	Mpls_1Label                uint32                    `protobuf:"varint,56,opt,name=mpls_1_label,json=mpls1Label,proto3" json:"mpls_1_label,omitempty"`          // First Label
	Mpls_2Ttl                  uint32                    `protobuf:"varint,57,opt,name=mpls_2_ttl,json=mpls2Ttl,proto3" json:"mpls_2_ttl,omitempty"`                // Second TTL
	Mpls_2Label                uint32                    `protobuf:"varint,58,opt,name=mpls_2_label,json=mpls2Label,proto3" json:"mpls_2_label,omitempty"`          // Second Label
	Mpls_3Ttl                  uint32                    `protobuf:"varint,59,opt,name=mpls_3_ttl,json=mpls3Ttl,proto3" json:"mpls_3_ttl,omitempty"`                // Third TTL
	Mpls_3Label                uint32                    `protobuf:"varint,60,opt,name=mpls_3_label,json=mpls3Label,proto3" json:"mpls_3_label,omitempty"`          // Third Label
	MplsLastTtl                uint32                    `protobuf:"varint,61,opt,name=mpls_last_ttl,json=mplsLastTtl,proto3" json:"mpls_last_ttl,omitempty"`       // Last TTL
	MplsLastLabel              uint32                    `protobuf:"varint,62,opt,name=mpls_last_label,json=mplsLastLabel,proto3" json:"mpls_last_label,omitempty"` // Last Label
	MplsLabelIp                []byte                    `protobuf:"bytes,65,opt,name=mpls_label_ip,json=mplsLabelIp,proto3" json:"mpls_label_ip,omitempty"`        // MPLS TOP Label IP
	ObservationDomainId        uint32                    `protobuf:"varint,70,opt,name=observation_domain_id,json=observationDomainId,proto3" json:"observation_domain_id,omitempty"`
	ObservationPointId         uint32                    `protobuf:"varint,71,opt,name=observation_point_id,json=observationPointId,proto3" json:"observation_point_id,omitempty"`
	SrcCountry                 string                    `protobuf:"bytes,1000,opt,name=src_country,json=srcCountry,proto3" json:"src_country,omitempty"`
	DstCountry                 string                    `protobuf:"bytes,1001,opt,name=dst_country,json=dstCountry,proto3" json:"dst_country,omitempty"`
	LayerStack                 []EnrichedFlow_LayerStack `protobuf:"varint,103,rep,packed,name=layer_stack,json=layerStack,proto3,enum=flowpb.EnrichedFlow_LayerStack" json:"layer_stack,omitempty"`
	LayerSize                  []uint32                  `protobuf:"varint,104,rep,packed,name=layer_size,json=layerSize,proto3" json:"layer_size,omitempty"`
	Ipv6RoutingHeaderAddresses [][]byte                  `protobuf:"bytes,105,rep,name=ipv6_routing_header_addresses,json=ipv6RoutingHeaderAddresses,proto3" json:"ipv6_routing_header_addresses,omitempty"` // SRv6
	Ipv6RoutingHeaderSegLeft   uint32                    `protobuf:"varint,106,opt,name=ipv6_routing_header_seg_left,json=ipv6RoutingHeaderSegLeft,proto3" json:"ipv6_routing_header_seg_left,omitempty"`    // SRv6
	PacketBytesMin             uint32                    `protobuf:"varint,2100,opt,name=PacketBytesMin,proto3" json:"PacketBytesMin,omitempty"`                                                             // new, single packet means uint32 < MTU
	PacketBytesMax             uint32                    `protobuf:"varint,2101,opt,name=PacketBytesMax,proto3" json:"PacketBytesMax,omitempty"`                                                             // new
	PacketBytesMean            uint32                    `protobuf:"varint,2102,opt,name=PacketBytesMean,proto3" json:"PacketBytesMean,omitempty"`                                                           // new
	PacketBytesStdDev          uint32                    `protobuf:"varint,2103,opt,name=PacketBytesStdDev,proto3" json:"PacketBytesStdDev,omitempty"`                                                       // new
	PacketIATMin               uint64                    `protobuf:"varint,2110,opt,name=PacketIATMin,proto3" json:"PacketIATMin,omitempty"`                                                                 // new
	PacketIATMax               uint64                    `protobuf:"varint,2111,opt,name=PacketIATMax,proto3" json:"PacketIATMax,omitempty"`                                                                 // new
	PacketIATMean              uint64                    `protobuf:"varint,2112,opt,name=PacketIATMean,proto3" json:"PacketIATMean,omitempty"`                                                               // new
	PacketIATStdDev            uint64                    `protobuf:"varint,2113,opt,name=PacketIATStdDev,proto3" json:"PacketIATStdDev,omitempty"`                                                           // new
	HeaderBytes                uint32                    `protobuf:"varint,2120,opt,name=HeaderBytes,proto3" json:"HeaderBytes,omitempty"`                                                                   // new
	FINFlagCount               uint64                    `protobuf:"varint,2130,opt,name=FINFlagCount,proto3" json:"FINFlagCount,omitempty"`                                                                 // new
	SYNFlagCount               uint64                    `protobuf:"varint,2131,opt,name=SYNFlagCount,proto3" json:"SYNFlagCount,omitempty"`                                                                 // new
	RSTFlagCount               uint64                    `protobuf:"varint,2132,opt,name=RSTFlagCount,proto3" json:"RSTFlagCount,omitempty"`                                                                 // new
	PSHFlagCount               uint64                    `protobuf:"varint,2133,opt,name=PSHFlagCount,proto3" json:"PSHFlagCount,omitempty"`                                                                 // new
	ACKFlagCount               uint64                    `protobuf:"varint,2134,opt,name=ACKFlagCount,proto3" json:"ACKFlagCount,omitempty"`                                                                 // new
	URGFlagCount               uint64                    `protobuf:"varint,2135,opt,name=URGFlagCount,proto3" json:"URGFlagCount,omitempty"`                                                                 // new
	CWRFlagCount               uint64                    `protobuf:"varint,2136,opt,name=CWRFlagCount,proto3" json:"CWRFlagCount,omitempty"`                                                                 // new
	ECEFlagCount               uint64                    `protobuf:"varint,2137,opt,name=ECEFlagCount,proto3" json:"ECEFlagCount,omitempty"`                                                                 // new
	PayloadPackets             uint64                    `protobuf:"varint,2140,opt,name=PayloadPackets,proto3" json:"PayloadPackets,omitempty"`                                                             // new
	TimeActiveMin              uint64                    `protobuf:"varint,2150,opt,name=TimeActiveMin,proto3" json:"TimeActiveMin,omitempty"`                                                               // new
	TimeActiveMax              uint64                    `protobuf:"varint,2151,opt,name=TimeActiveMax,proto3" json:"TimeActiveMax,omitempty"`                                                               // new
	TimeActiveMean             uint64                    `protobuf:"varint,2152,opt,name=TimeActiveMean,proto3" json:"TimeActiveMean,omitempty"`                                                             // new
	TimeActiveStdDev           uint64                    `protobuf:"varint,2153,opt,name=TimeActiveStdDev,proto3" json:"TimeActiveStdDev,omitempty"`                                                         // new
	TimeIdleMin                uint64                    `protobuf:"varint,2154,opt,name=TimeIdleMin,proto3" json:"TimeIdleMin,omitempty"`                                                                   // new
	TimeIdleMax                uint64                    `protobuf:"varint,2155,opt,name=TimeIdleMax,proto3" json:"TimeIdleMax,omitempty"`                                                                   // new
	TimeIdleMean               uint64                    `protobuf:"varint,2156,opt,name=TimeIdleMean,proto3" json:"TimeIdleMean,omitempty"`                                                                 // new
	TimeIdleStdDev             uint64                    `protobuf:"varint,2157,opt,name=TimeIdleStdDev,proto3" json:"TimeIdleStdDev,omitempty"`                                                             // new
	// modify/addcid
	Cid                               uint32                      `protobuf:"varint,2000,opt,name=Cid,proto3" json:"Cid,omitempty"`            // TODO: deprecate and provide as helper?
	CidString                         string                      `protobuf:"bytes,2001,opt,name=CidString,proto3" json:"CidString,omitempty"` // deprecated, delete for v1.0.0
	SrcCid                            uint32                      `protobuf:"varint,2012,opt,name=SrcCid,proto3" json:"SrcCid,omitempty"`
	DstCid                            uint32                      `protobuf:"varint,2013,opt,name=DstCid,proto3" json:"DstCid,omitempty"`
	SrcAddrAnon                       EnrichedFlow_AnonymizedType `protobuf:"varint,2160,opt,name=SrcAddrAnon,proto3,enum=flowpb.EnrichedFlow_AnonymizedType" json:"SrcAddrAnon,omitempty"`
	DstAddrAnon                       EnrichedFlow_AnonymizedType `protobuf:"varint,2161,opt,name=DstAddrAnon,proto3,enum=flowpb.EnrichedFlow_AnonymizedType" json:"DstAddrAnon,omitempty"`
	SrcAddrPreservedLen               uint32                      `protobuf:"varint,2162,opt,name=SrcAddrPreservedLen,proto3" json:"SrcAddrPreservedLen,omitempty"`
	DstAddrPreservedLen               uint32                      `protobuf:"varint,2163,opt,name=DstAddrPreservedLen,proto3" json:"DstAddrPreservedLen,omitempty"`
	SamplerAddrAnon                   EnrichedFlow_AnonymizedType `protobuf:"varint,2164,opt,name=SamplerAddrAnon,proto3,enum=flowpb.EnrichedFlow_AnonymizedType" json:"SamplerAddrAnon,omitempty"`
	SamplerAddrAnonPreservedPrefixLen uint32                      `protobuf:"varint,2165,opt,name=SamplerAddrAnonPreservedPrefixLen,proto3" json:"SamplerAddrAnonPreservedPrefixLen,omitempty"`
	// modify/bgp
	// as done by a number of Netflow implementations, these refer to the destination
	Med              uint32                            `protobuf:"varint,2172,opt,name=Med,proto3" json:"Med,omitempty"`
	LocalPref        uint32                            `protobuf:"varint,2173,opt,name=LocalPref,proto3" json:"LocalPref,omitempty"`
	ValidationStatus EnrichedFlow_ValidationStatusType `protobuf:"varint,2174,opt,name=ValidationStatus,proto3,enum=flowpb.EnrichedFlow_ValidationStatusType" json:"ValidationStatus,omitempty"`
	// modify/geolocation
	RemoteCountry string                      `protobuf:"bytes,2010,opt,name=RemoteCountry,proto3" json:"RemoteCountry,omitempty"` // TODO: deprecate and provide as helper
	SrcCountryBW  string                      `protobuf:"bytes,2014,opt,name=SrcCountryBW,proto3" json:"SrcCountryBW,omitempty"`
	DstCountryBW  string                      `protobuf:"bytes,2015,opt,name=DstCountryBW,proto3" json:"DstCountryBW,omitempty"`
	Normalized    EnrichedFlow_NormalizedType `protobuf:"varint,2002,opt,name=Normalized,proto3,enum=flowpb.EnrichedFlow_NormalizedType" json:"Normalized,omitempty"` // TODO: deprecate and replace with helper?
	// modify/protomap
	ProtoName  string                      `protobuf:"bytes,2009,opt,name=ProtoName,proto3" json:"ProtoName,omitempty"`                                            // TODO: deprecate and replace with helper, why lug a string along...
	RemoteAddr EnrichedFlow_RemoteAddrType `protobuf:"varint,2011,opt,name=RemoteAddr,proto3,enum=flowpb.EnrichedFlow_RemoteAddrType" json:"RemoteAddr,omitempty"` // TODO: figure out a better system? applicable only to service providers right now...
	// modify/reversedns
	SrcHostName     string `protobuf:"bytes,2180,opt,name=SrcHostName,proto3" json:"SrcHostName,omitempty"`
	DstHostName     string `protobuf:"bytes,2181,opt,name=DstHostName,proto3" json:"DstHostName,omitempty"`
	NextHopHostName string `protobuf:"bytes,2182,opt,name=NextHopHostName,proto3" json:"NextHopHostName,omitempty"`
	SrcASName       string `protobuf:"bytes,2183,opt,name=SrcASName,proto3" json:"SrcASName,omitempty"`
	DstASName       string `protobuf:"bytes,2184,opt,name=DstASName,proto3" json:"DstASName,omitempty"`
	NextHopASName   string `protobuf:"bytes,2185,opt,name=NextHopASName,proto3" json:"NextHopASName,omitempty"`
	SamplerHostName string `protobuf:"bytes,2186,opt,name=SamplerHostName,proto3" json:"SamplerHostName,omitempty"`
	// modify/snmp
	SrcIfName  string `protobuf:"bytes,2003,opt,name=SrcIfName,proto3" json:"SrcIfName,omitempty"`    // TODO: rename to match InIf and OutIf
	SrcIfDesc  string `protobuf:"bytes,2004,opt,name=SrcIfDesc,proto3" json:"SrcIfDesc,omitempty"`    // TODO: rename to match InIf and OutIf
	SrcIfSpeed uint32 `protobuf:"varint,2005,opt,name=SrcIfSpeed,proto3" json:"SrcIfSpeed,omitempty"` // TODO: rename to match InIf and OutIf
	DstIfName  string `protobuf:"bytes,2006,opt,name=DstIfName,proto3" json:"DstIfName,omitempty"`    // TODO: rename to match InIf and OutIf
	DstIfDesc  string `protobuf:"bytes,2007,opt,name=DstIfDesc,proto3" json:"DstIfDesc,omitempty"`    // TODO: rename to match InIf and OutIf
	DstIfSpeed uint32 `protobuf:"varint,2008,opt,name=DstIfSpeed,proto3" json:"DstIfSpeed,omitempty"` // TODO: rename to match InIf and OutIf
	// general
	Note string `protobuf:"bytes,2016,opt,name=Note,proto3" json:"Note,omitempty"` // free-form field to implement anything
	// modify/addrstrings
	SourceIP       string `protobuf:"bytes,2290,opt,name=SourceIP,proto3" json:"SourceIP,omitempty"`
	DestinationIP  string `protobuf:"bytes,2291,opt,name=DestinationIP,proto3" json:"DestinationIP,omitempty"`
	NextHopIP      string `protobuf:"bytes,2292,opt,name=NextHopIP,proto3" json:"NextHopIP,omitempty"`
	SamplerIP      string `protobuf:"bytes,2293,opt,name=SamplerIP,proto3" json:"SamplerIP,omitempty"`
	SourceMAC      string `protobuf:"bytes,2294,opt,name=SourceMAC,proto3" json:"SourceMAC,omitempty"`
	DestinationMAC string `protobuf:"bytes,2295,opt,name=DestinationMAC,proto3" json:"DestinationMAC,omitempty"`
	// VRF
	IngressVrfIDBW uint32 `protobuf:"varint,2539,opt,name=IngressVrfIDBW,proto3" json:"IngressVrfIDBW,omitempty"`
	EgressVrfIDBW  uint32 `protobuf:"varint,2540,opt,name=EgressVrfIDBW,proto3" json:"EgressVrfIDBW,omitempty"`
	// Replaced by ns values
	TimeFlowStart uint64 `protobuf:"varint,2538,opt,name=TimeFlowStart,proto3" json:"TimeFlowStart,omitempty"`
}

func (x *EnrichedFlow) Reset() {
	*x = EnrichedFlow{}
	mi := &file_enrichedflow_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnrichedFlow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnrichedFlow) ProtoMessage() {}

func (x *EnrichedFlow) ProtoReflect() protoreflect.Message {
	mi := &file_enrichedflow_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnrichedFlow.ProtoReflect.Descriptor instead.
func (*EnrichedFlow) Descriptor() ([]byte, []int) {
	return file_enrichedflow_proto_rawDescGZIP(), []int{0}
}

func (x *EnrichedFlow) GetType() EnrichedFlow_FlowType {
	if x != nil {
		return x.Type
	}
	return EnrichedFlow_FLOWUNKNOWN
}

func (x *EnrichedFlow) GetTimeReceived() uint64 {
	if x != nil {
		return x.TimeReceived
	}
	return 0
}

func (x *EnrichedFlow) GetTimeReceivedNs() uint64 {
	if x != nil {
		return x.TimeReceivedNs
	}
	return 0
}

func (x *EnrichedFlow) GetSequenceNum() uint32 {
	if x != nil {
		return x.SequenceNum
	}
	return 0
}

func (x *EnrichedFlow) GetSamplingRate() uint64 {
	if x != nil {
		return x.SamplingRate
	}
	return 0
}

func (x *EnrichedFlow) GetFlowDirection() uint32 {
	if x != nil {
		return x.FlowDirection
	}
	return 0
}

func (x *EnrichedFlow) GetTimeFlowStartNs() uint64 {
	if x != nil {
		return x.TimeFlowStartNs
	}
	return 0
}

func (x *EnrichedFlow) GetTimeFlowEndNs() uint64 {
	if x != nil {
		return x.TimeFlowEndNs
	}
	return 0
}

func (x *EnrichedFlow) GetSamplerAddress() []byte {
	if x != nil {
		return x.SamplerAddress
	}
	return nil
}

func (x *EnrichedFlow) GetTimeFlowEnd() uint64 {
	if x != nil {
		return x.TimeFlowEnd
	}
	return 0
}

func (x *EnrichedFlow) GetTimeFlowStartMs() uint64 {
	if x != nil {
		return x.TimeFlowStartMs
	}
	return 0
}

func (x *EnrichedFlow) GetTimeFlowEndMs() uint64 {
	if x != nil {
		return x.TimeFlowEndMs
	}
	return 0
}

func (x *EnrichedFlow) GetBytes() uint64 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

func (x *EnrichedFlow) GetPackets() uint64 {
	if x != nil {
		return x.Packets
	}
	return 0
}

func (x *EnrichedFlow) GetSrcAddr() []byte {
	if x != nil {
		return x.SrcAddr
	}
	return nil
}

func (x *EnrichedFlow) GetDstAddr() []byte {
	if x != nil {
		return x.DstAddr
	}
	return nil
}

func (x *EnrichedFlow) GetEtype() uint32 {
	if x != nil {
		return x.Etype
	}
	return 0
}

func (x *EnrichedFlow) GetProto() uint32 {
	if x != nil {
		return x.Proto
	}
	return 0
}

func (x *EnrichedFlow) GetSrcPort() uint32 {
	if x != nil {
		return x.SrcPort
	}
	return 0
}

func (x *EnrichedFlow) GetDstPort() uint32 {
	if x != nil {
		return x.DstPort
	}
	return 0
}

func (x *EnrichedFlow) GetInIf() uint32 {
	if x != nil {
		return x.InIf
	}
	return 0
}

func (x *EnrichedFlow) GetOutIf() uint32 {
	if x != nil {
		return x.OutIf
	}
	return 0
}

func (x *EnrichedFlow) GetSrcMac() uint64 {
	if x != nil {
		return x.SrcMac
	}
	return 0
}

func (x *EnrichedFlow) GetDstMac() uint64 {
	if x != nil {
		return x.DstMac
	}
	return 0
}

func (x *EnrichedFlow) GetSrcVlan() uint32 {
	if x != nil {
		return x.SrcVlan
	}
	return 0
}

func (x *EnrichedFlow) GetDstVlan() uint32 {
	if x != nil {
		return x.DstVlan
	}
	return 0
}

func (x *EnrichedFlow) GetVlanId() uint32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

func (x *EnrichedFlow) GetIngressVrfId() uint32 {
	if x != nil {
		return x.IngressVrfId
	}
	return 0
}

func (x *EnrichedFlow) GetEgressVrfId() uint32 {
	if x != nil {
		return x.EgressVrfId
	}
	return 0
}

func (x *EnrichedFlow) GetIpTos() uint32 {
	if x != nil {
		return x.IpTos
	}
	return 0
}

func (x *EnrichedFlow) GetForwardingStatus() uint32 {
	if x != nil {
		return x.ForwardingStatus
	}
	return 0
}

func (x *EnrichedFlow) GetIpTtl() uint32 {
	if x != nil {
		return x.IpTtl
	}
	return 0
}

func (x *EnrichedFlow) GetIpFlags() uint32 {
	if x != nil {
		return x.IpFlags
	}
	return 0
}

func (x *EnrichedFlow) GetTcpFlags() uint32 {
	if x != nil {
		return x.TcpFlags
	}
	return 0
}

func (x *EnrichedFlow) GetIcmpType() uint32 {
	if x != nil {
		return x.IcmpType
	}
	return 0
}

func (x *EnrichedFlow) GetIcmpCode() uint32 {
	if x != nil {
		return x.IcmpCode
	}
	return 0
}

func (x *EnrichedFlow) GetIpv6FlowLabel() uint32 {
	if x != nil {
		return x.Ipv6FlowLabel
	}
	return 0
}

func (x *EnrichedFlow) GetFragmentId() uint32 {
	if x != nil {
		return x.FragmentId
	}
	return 0
}

func (x *EnrichedFlow) GetFragmentOffset() uint32 {
	if x != nil {
		return x.FragmentOffset
	}
	return 0
}

func (x *EnrichedFlow) GetBiFlowDirection() uint32 {
	if x != nil {
		return x.BiFlowDirection
	}
	return 0
}

func (x *EnrichedFlow) GetSrcAs() uint32 {
	if x != nil {
		return x.SrcAs
	}
	return 0
}

func (x *EnrichedFlow) GetDstAs() uint32 {
	if x != nil {
		return x.DstAs
	}
	return 0
}

func (x *EnrichedFlow) GetNextHop() []byte {
	if x != nil {
		return x.NextHop
	}
	return nil
}

func (x *EnrichedFlow) GetNextHopAs() uint32 {
	if x != nil {
		return x.NextHopAs
	}
	return 0
}

func (x *EnrichedFlow) GetSrcNet() uint32 {
	if x != nil {
		return x.SrcNet
	}
	return 0
}

func (x *EnrichedFlow) GetDstNet() uint32 {
	if x != nil {
		return x.DstNet
	}
	return 0
}

func (x *EnrichedFlow) GetBgpNextHop() []byte {
	if x != nil {
		return x.BgpNextHop
	}
	return nil
}

func (x *EnrichedFlow) GetBgpCommunities() []uint32 {
	if x != nil {
		return x.BgpCommunities
	}
	return nil
}

func (x *EnrichedFlow) GetAsPath() []uint32 {
	if x != nil {
		return x.AsPath
	}
	return nil
}

func (x *EnrichedFlow) GetMplsTtl() []uint32 {
	if x != nil {
		return x.MplsTtl
	}
	return nil
}

func (x *EnrichedFlow) GetMplsLabel() []uint32 {
	if x != nil {
		return x.MplsLabel
	}
	return nil
}

func (x *EnrichedFlow) GetMplsIp() [][]byte {
	if x != nil {
		return x.MplsIp
	}
	return nil
}

func (x *EnrichedFlow) GetHasMpls() bool {
	if x != nil {
		return x.HasMpls
	}
	return false
}

func (x *EnrichedFlow) GetMplsCount() uint32 {
	if x != nil {
		return x.MplsCount
	}
	return 0
}

func (x *EnrichedFlow) GetMpls_1Ttl() uint32 {
	if x != nil {
		return x.Mpls_1Ttl
	}
	return 0
}

func (x *EnrichedFlow) GetMpls_1Label() uint32 {
	if x != nil {
		return x.Mpls_1Label
	}
	return 0
}

func (x *EnrichedFlow) GetMpls_2Ttl() uint32 {
	if x != nil {
		return x.Mpls_2Ttl
	}
	return 0
}

func (x *EnrichedFlow) GetMpls_2Label() uint32 {
	if x != nil {
		return x.Mpls_2Label
	}
	return 0
}

func (x *EnrichedFlow) GetMpls_3Ttl() uint32 {
	if x != nil {
		return x.Mpls_3Ttl
	}
	return 0
}

func (x *EnrichedFlow) GetMpls_3Label() uint32 {
	if x != nil {
		return x.Mpls_3Label
	}
	return 0
}

func (x *EnrichedFlow) GetMplsLastTtl() uint32 {
	if x != nil {
		return x.MplsLastTtl
	}
	return 0
}

func (x *EnrichedFlow) GetMplsLastLabel() uint32 {
	if x != nil {
		return x.MplsLastLabel
	}
	return 0
}

func (x *EnrichedFlow) GetMplsLabelIp() []byte {
	if x != nil {
		return x.MplsLabelIp
	}
	return nil
}

func (x *EnrichedFlow) GetObservationDomainId() uint32 {
	if x != nil {
		return x.ObservationDomainId
	}
	return 0
}

func (x *EnrichedFlow) GetObservationPointId() uint32 {
	if x != nil {
		return x.ObservationPointId
	}
	return 0
}

func (x *EnrichedFlow) GetSrcCountry() string {
	if x != nil {
		return x.SrcCountry
	}
	return ""
}

func (x *EnrichedFlow) GetDstCountry() string {
	if x != nil {
		return x.DstCountry
	}
	return ""
}

func (x *EnrichedFlow) GetLayerStack() []EnrichedFlow_LayerStack {
	if x != nil {
		return x.LayerStack
	}
	return nil
}

func (x *EnrichedFlow) GetLayerSize() []uint32 {
	if x != nil {
		return x.LayerSize
	}
	return nil
}

func (x *EnrichedFlow) GetIpv6RoutingHeaderAddresses() [][]byte {
	if x != nil {
		return x.Ipv6RoutingHeaderAddresses
	}
	return nil
}

func (x *EnrichedFlow) GetIpv6RoutingHeaderSegLeft() uint32 {
	if x != nil {
		return x.Ipv6RoutingHeaderSegLeft
	}
	return 0
}

func (x *EnrichedFlow) GetPacketBytesMin() uint32 {
	if x != nil {
		return x.PacketBytesMin
	}
	return 0
}

func (x *EnrichedFlow) GetPacketBytesMax() uint32 {
	if x != nil {
		return x.PacketBytesMax
	}
	return 0
}

func (x *EnrichedFlow) GetPacketBytesMean() uint32 {
	if x != nil {
		return x.PacketBytesMean
	}
	return 0
}

func (x *EnrichedFlow) GetPacketBytesStdDev() uint32 {
	if x != nil {
		return x.PacketBytesStdDev
	}
	return 0
}

func (x *EnrichedFlow) GetPacketIATMin() uint64 {
	if x != nil {
		return x.PacketIATMin
	}
	return 0
}

func (x *EnrichedFlow) GetPacketIATMax() uint64 {
	if x != nil {
		return x.PacketIATMax
	}
	return 0
}

func (x *EnrichedFlow) GetPacketIATMean() uint64 {
	if x != nil {
		return x.PacketIATMean
	}
	return 0
}

func (x *EnrichedFlow) GetPacketIATStdDev() uint64 {
	if x != nil {
		return x.PacketIATStdDev
	}
	return 0
}

func (x *EnrichedFlow) GetHeaderBytes() uint32 {
	if x != nil {
		return x.HeaderBytes
	}
	return 0
}

func (x *EnrichedFlow) GetFINFlagCount() uint64 {
	if x != nil {
		return x.FINFlagCount
	}
	return 0
}

func (x *EnrichedFlow) GetSYNFlagCount() uint64 {
	if x != nil {
		return x.SYNFlagCount
	}
	return 0
}

func (x *EnrichedFlow) GetRSTFlagCount() uint64 {
	if x != nil {
		return x.RSTFlagCount
	}
	return 0
}

func (x *EnrichedFlow) GetPSHFlagCount() uint64 {
	if x != nil {
		return x.PSHFlagCount
	}
	return 0
}

func (x *EnrichedFlow) GetACKFlagCount() uint64 {
	if x != nil {
		return x.ACKFlagCount
	}
	return 0
}

func (x *EnrichedFlow) GetURGFlagCount() uint64 {
	if x != nil {
		return x.URGFlagCount
	}
	return 0
}

func (x *EnrichedFlow) GetCWRFlagCount() uint64 {
	if x != nil {
		return x.CWRFlagCount
	}
	return 0
}

func (x *EnrichedFlow) GetECEFlagCount() uint64 {
	if x != nil {
		return x.ECEFlagCount
	}
	return 0
}

func (x *EnrichedFlow) GetPayloadPackets() uint64 {
	if x != nil {
		return x.PayloadPackets
	}
	return 0
}

func (x *EnrichedFlow) GetTimeActiveMin() uint64 {
	if x != nil {
		return x.TimeActiveMin
	}
	return 0
}

func (x *EnrichedFlow) GetTimeActiveMax() uint64 {
	if x != nil {
		return x.TimeActiveMax
	}
	return 0
}

func (x *EnrichedFlow) GetTimeActiveMean() uint64 {
	if x != nil {
		return x.TimeActiveMean
	}
	return 0
}

func (x *EnrichedFlow) GetTimeActiveStdDev() uint64 {
	if x != nil {
		return x.TimeActiveStdDev
	}
	return 0
}

func (x *EnrichedFlow) GetTimeIdleMin() uint64 {
	if x != nil {
		return x.TimeIdleMin
	}
	return 0
}

func (x *EnrichedFlow) GetTimeIdleMax() uint64 {
	if x != nil {
		return x.TimeIdleMax
	}
	return 0
}

func (x *EnrichedFlow) GetTimeIdleMean() uint64 {
	if x != nil {
		return x.TimeIdleMean
	}
	return 0
}

func (x *EnrichedFlow) GetTimeIdleStdDev() uint64 {
	if x != nil {
		return x.TimeIdleStdDev
	}
	return 0
}

func (x *EnrichedFlow) GetCid() uint32 {
	if x != nil {
		return x.Cid
	}
	return 0
}

func (x *EnrichedFlow) GetCidString() string {
	if x != nil {
		return x.CidString
	}
	return ""
}

func (x *EnrichedFlow) GetSrcCid() uint32 {
	if x != nil {
		return x.SrcCid
	}
	return 0
}

func (x *EnrichedFlow) GetDstCid() uint32 {
	if x != nil {
		return x.DstCid
	}
	return 0
}

func (x *EnrichedFlow) GetSrcAddrAnon() EnrichedFlow_AnonymizedType {
	if x != nil {
		return x.SrcAddrAnon
	}
	return EnrichedFlow_NotAnonymized
}

func (x *EnrichedFlow) GetDstAddrAnon() EnrichedFlow_AnonymizedType {
	if x != nil {
		return x.DstAddrAnon
	}
	return EnrichedFlow_NotAnonymized
}

func (x *EnrichedFlow) GetSrcAddrPreservedLen() uint32 {
	if x != nil {
		return x.SrcAddrPreservedLen
	}
	return 0
}

func (x *EnrichedFlow) GetDstAddrPreservedLen() uint32 {
	if x != nil {
		return x.DstAddrPreservedLen
	}
	return 0
}

func (x *EnrichedFlow) GetSamplerAddrAnon() EnrichedFlow_AnonymizedType {
	if x != nil {
		return x.SamplerAddrAnon
	}
	return EnrichedFlow_NotAnonymized
}

func (x *EnrichedFlow) GetSamplerAddrAnonPreservedPrefixLen() uint32 {
	if x != nil {
		return x.SamplerAddrAnonPreservedPrefixLen
	}
	return 0
}

func (x *EnrichedFlow) GetMed() uint32 {
	if x != nil {
		return x.Med
	}
	return 0
}

func (x *EnrichedFlow) GetLocalPref() uint32 {
	if x != nil {
		return x.LocalPref
	}
	return 0
}

func (x *EnrichedFlow) GetValidationStatus() EnrichedFlow_ValidationStatusType {
	if x != nil {
		return x.ValidationStatus
	}
	return EnrichedFlow_Unknown
}

func (x *EnrichedFlow) GetRemoteCountry() string {
	if x != nil {
		return x.RemoteCountry
	}
	return ""
}

func (x *EnrichedFlow) GetSrcCountryBW() string {
	if x != nil {
		return x.SrcCountryBW
	}
	return ""
}

func (x *EnrichedFlow) GetDstCountryBW() string {
	if x != nil {
		return x.DstCountryBW
	}
	return ""
}

func (x *EnrichedFlow) GetNormalized() EnrichedFlow_NormalizedType {
	if x != nil {
		return x.Normalized
	}
	return EnrichedFlow_No
}

func (x *EnrichedFlow) GetProtoName() string {
	if x != nil {
		return x.ProtoName
	}
	return ""
}

func (x *EnrichedFlow) GetRemoteAddr() EnrichedFlow_RemoteAddrType {
	if x != nil {
		return x.RemoteAddr
	}
	return EnrichedFlow_Neither
}

func (x *EnrichedFlow) GetSrcHostName() string {
	if x != nil {
		return x.SrcHostName
	}
	return ""
}

func (x *EnrichedFlow) GetDstHostName() string {
	if x != nil {
		return x.DstHostName
	}
	return ""
}

func (x *EnrichedFlow) GetNextHopHostName() string {
	if x != nil {
		return x.NextHopHostName
	}
	return ""
}

func (x *EnrichedFlow) GetSrcASName() string {
	if x != nil {
		return x.SrcASName
	}
	return ""
}

func (x *EnrichedFlow) GetDstASName() string {
	if x != nil {
		return x.DstASName
	}
	return ""
}

func (x *EnrichedFlow) GetNextHopASName() string {
	if x != nil {
		return x.NextHopASName
	}
	return ""
}

func (x *EnrichedFlow) GetSamplerHostName() string {
	if x != nil {
		return x.SamplerHostName
	}
	return ""
}

func (x *EnrichedFlow) GetSrcIfName() string {
	if x != nil {
		return x.SrcIfName
	}
	return ""
}

func (x *EnrichedFlow) GetSrcIfDesc() string {
	if x != nil {
		return x.SrcIfDesc
	}
	return ""
}

func (x *EnrichedFlow) GetSrcIfSpeed() uint32 {
	if x != nil {
		return x.SrcIfSpeed
	}
	return 0
}

func (x *EnrichedFlow) GetDstIfName() string {
	if x != nil {
		return x.DstIfName
	}
	return ""
}

func (x *EnrichedFlow) GetDstIfDesc() string {
	if x != nil {
		return x.DstIfDesc
	}
	return ""
}

func (x *EnrichedFlow) GetDstIfSpeed() uint32 {
	if x != nil {
		return x.DstIfSpeed
	}
	return 0
}

func (x *EnrichedFlow) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *EnrichedFlow) GetSourceIP() string {
	if x != nil {
		return x.SourceIP
	}
	return ""
}

func (x *EnrichedFlow) GetDestinationIP() string {
	if x != nil {
		return x.DestinationIP
	}
	return ""
}

func (x *EnrichedFlow) GetNextHopIP() string {
	if x != nil {
		return x.NextHopIP
	}
	return ""
}

func (x *EnrichedFlow) GetSamplerIP() string {
	if x != nil {
		return x.SamplerIP
	}
	return ""
}

func (x *EnrichedFlow) GetSourceMAC() string {
	if x != nil {
		return x.SourceMAC
	}
	return ""
}

func (x *EnrichedFlow) GetDestinationMAC() string {
	if x != nil {
		return x.DestinationMAC
	}
	return ""
}

func (x *EnrichedFlow) GetIngressVrfIDBW() uint32 {
	if x != nil {
		return x.IngressVrfIDBW
	}
	return 0
}

func (x *EnrichedFlow) GetEgressVrfIDBW() uint32 {
	if x != nil {
		return x.EgressVrfIDBW
	}
	return 0
}

func (x *EnrichedFlow) GetTimeFlowStart() uint64 {
	if x != nil {
		return x.TimeFlowStart
	}
	return 0
}

var File_enrichedflow_proto protoreflect.FileDescriptor

var file_enrichedflow_proto_rawDesc = []byte{
	0x0a, 0x12, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x65, 0x64, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x66, 0x6c, 0x6f, 0x77, 0x70, 0x62, 0x22, 0x9f, 0x2d, 0x0a,
	0x0c, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x31, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x66, 0x6c,
	0x6f, 0x77, 0x70, 0x62, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x65, 0x64, 0x46, 0x6c, 0x6f,
	0x77, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x6e, 0x73, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0e, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x4e, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e,
	0x75, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x66, 0x6c, 0x6f, 0x77, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b,
	0x0a, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x6e, 0x73, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65,
	0x46, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4e, 0x73, 0x12, 0x27, 0x0a, 0x10, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x6e, 0x73, 0x18,
	0x70, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x45,
	0x6e, 0x64, 0x4e, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a,
	0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x6e,
	0x64, 0x12, 0x2b, 0x0a, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x74,
	0x69, 0x6d, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x73, 0x12, 0x27,
	0x0a, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x6e, 0x64, 0x5f,
	0x6d, 0x73, 0x18, 0x40, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x6c,
	0x6f, 0x77, 0x45, 0x6e, 0x64, 0x4d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x73, 0x72, 0x63, 0x41, 0x64,
	0x64, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x73, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x64, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x72, 0x63,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x72, 0x63,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x13, 0x0a, 0x05, 0x69, 0x6e, 0x5f, 0x69, 0x66, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x69, 0x6e, 0x49, 0x66, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x66, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6f, 0x75, 0x74, 0x49, 0x66, 0x12, 0x17, 0x0a, 0x07, 0x73,
	0x72, 0x63, 0x5f, 0x6d, 0x61, 0x63, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x72,
	0x63, 0x4d, 0x61, 0x63, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x63, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x64, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x72, 0x63, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x73, 0x72, 0x63, 0x56, 0x6c, 0x61, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x73, 0x74, 0x5f,
	0x76, 0x6c, 0x61, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x73, 0x74, 0x56,
	0x6c, 0x61, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e,
	0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x76, 0x72, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x27,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x56, 0x72, 0x66,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x76, 0x72, 0x66,
	0x5f, 0x69, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x65, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x56, 0x72, 0x66, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x70, 0x5f, 0x74, 0x6f, 0x73,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x70, 0x54, 0x6f, 0x73, 0x12, 0x2b, 0x0a,
	0x11, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x70,
	0x5f, 0x74, 0x74, 0x6c, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x70, 0x54, 0x74,
	0x6c, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x70, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x26, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x69, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x63, 0x70, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x74, 0x63, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x63, 0x6d,
	0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x63,
	0x6d, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x63, 0x6d, 0x70, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x69, 0x70,
	0x76, 0x36, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x66,
	0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f,
	0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x24, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x62, 0x69, 0x46, 0x6c, 0x6f, 0x77, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x72, 0x63, 0x5f, 0x61, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x73, 0x72, 0x63, 0x41, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x73, 0x74, 0x5f,
	0x61, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x73, 0x74, 0x41, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x12, 0x1e, 0x0a, 0x0b, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x61, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x41, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x72,
	0x63, 0x5f, 0x6e, 0x65, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x72, 0x63,
	0x4e, 0x65, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x73, 0x74, 0x5f, 0x6e, 0x65, 0x74, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0c,
	0x62, 0x67, 0x70, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x62, 0x67, 0x70, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x12, 0x27,
	0x0a, 0x0f, 0x62, 0x67, 0x70, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x65, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x62, 0x67, 0x70, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x73, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x66, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x73, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x19, 0x0a, 0x08, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x50, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x07, 0x6d, 0x70, 0x6c, 0x73, 0x54, 0x74, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x6d,
	0x70, 0x6c, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x51, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x09, 0x6d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x70,
	0x6c, 0x73, 0x5f, 0x69, 0x70, 0x18, 0x52, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x6d, 0x70, 0x6c,
	0x73, 0x49, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x18,
	0x35, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4d, 0x70, 0x6c, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x36, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x6d, 0x70, 0x6c, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a,
	0x0a, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x31, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x37, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x6d, 0x70, 0x6c, 0x73, 0x31, 0x54, 0x74, 0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x6d,
	0x70, 0x6c, 0x73, 0x5f, 0x31, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x38, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x6d, 0x70, 0x6c, 0x73, 0x31, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1c, 0x0a,
	0x0a, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x32, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x39, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x6d, 0x70, 0x6c, 0x73, 0x32, 0x54, 0x74, 0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x6d,
	0x70, 0x6c, 0x73, 0x5f, 0x32, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x3a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x6d, 0x70, 0x6c, 0x73, 0x32, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1c, 0x0a,
	0x0a, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x33, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x3b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x6d, 0x70, 0x6c, 0x73, 0x33, 0x54, 0x74, 0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x6d,
	0x70, 0x6c, 0x73, 0x5f, 0x33, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x3c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x6d, 0x70, 0x6c, 0x73, 0x33, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x22, 0x0a,
	0x0d, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x3d,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x74,
	0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x70, 0x6c, 0x73,
	0x4c, 0x61, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x70, 0x6c,
	0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x69, 0x70, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0b, 0x6d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x70, 0x12, 0x32, 0x0a,
	0x15, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49,
	0x64, 0x12, 0x30, 0x0a, 0x14, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x47, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x12, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x72, 0x63, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x72, 0x63, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x73, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x40, 0x0a, 0x0b, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x67, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x66,
	0x6c, 0x6f, 0x77, 0x70, 0x62, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x65, 0x64, 0x46, 0x6c,
	0x6f, 0x77, 0x2e, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x0a, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x68, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x41, 0x0a, 0x1d, 0x69, 0x70, 0x76, 0x36,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x69, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x1a, 0x69, 0x70, 0x76, 0x36, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x1c, 0x69,
	0x70, 0x76, 0x36, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x67, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x6a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x18, 0x69, 0x70, 0x76, 0x36, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x53, 0x65, 0x67, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x27, 0x0a, 0x0e, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x69, 0x6e, 0x18, 0xb4, 0x10,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x4d, 0x69, 0x6e, 0x12, 0x27, 0x0a, 0x0e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x4d, 0x61, 0x78, 0x18, 0xb5, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x61, 0x78, 0x12, 0x29, 0x0a,
	0x0f, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x61, 0x6e,
	0x18, 0xb6, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x61, 0x6e, 0x12, 0x2d, 0x0a, 0x11, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x53, 0x74, 0x64, 0x44, 0x65, 0x76, 0x18, 0xb7, 0x10,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x53, 0x74, 0x64, 0x44, 0x65, 0x76, 0x12, 0x23, 0x0a, 0x0c, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x49, 0x41, 0x54, 0x4d, 0x69, 0x6e, 0x18, 0xbe, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x41, 0x54, 0x4d, 0x69, 0x6e, 0x12, 0x23, 0x0a, 0x0c,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x41, 0x54, 0x4d, 0x61, 0x78, 0x18, 0xbf, 0x10, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0c, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x41, 0x54, 0x4d, 0x61,
	0x78, 0x12, 0x25, 0x0a, 0x0d, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x41, 0x54, 0x4d, 0x65,
	0x61, 0x6e, 0x18, 0xc0, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x49, 0x41, 0x54, 0x4d, 0x65, 0x61, 0x6e, 0x12, 0x29, 0x0a, 0x0f, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x49, 0x41, 0x54, 0x53, 0x74, 0x64, 0x44, 0x65, 0x76, 0x18, 0xc1, 0x10, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0f, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x41, 0x54, 0x53, 0x74, 0x64,
	0x44, 0x65, 0x76, 0x12, 0x21, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x18, 0xc8, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0c, 0x46, 0x49, 0x4e, 0x46, 0x6c, 0x61,
	0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xd2, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x46,
	0x49, 0x4e, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0c, 0x53,
	0x59, 0x4e, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xd3, 0x10, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0c, 0x53, 0x59, 0x4e, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x23, 0x0a, 0x0c, 0x52, 0x53, 0x54, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0xd4, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x52, 0x53, 0x54, 0x46, 0x6c, 0x61, 0x67,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0c, 0x50, 0x53, 0x48, 0x46, 0x6c, 0x61, 0x67,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xd5, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x50, 0x53,
	0x48, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0c, 0x41, 0x43,
	0x4b, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xd6, 0x10, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0c, 0x41, 0x43, 0x4b, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x23, 0x0a, 0x0c, 0x55, 0x52, 0x47, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0xd7, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x55, 0x52, 0x47, 0x46, 0x6c, 0x61, 0x67, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0c, 0x43, 0x57, 0x52, 0x46, 0x6c, 0x61, 0x67, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0xd8, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x43, 0x57, 0x52,
	0x46, 0x6c, 0x61, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0c, 0x45, 0x43, 0x45,
	0x46, 0x6c, 0x61, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xd9, 0x10, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0c, 0x45, 0x43, 0x45, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27,
	0x0a, 0x0e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x18, 0xdc, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0d, 0x54, 0x69, 0x6d, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x69, 0x6e, 0x18, 0xe6, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0d, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x69, 0x6e, 0x12, 0x25,
	0x0a, 0x0d, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x61, 0x78, 0x18,
	0xe7, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x27, 0x0a, 0x0e, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x4d, 0x65, 0x61, 0x6e, 0x18, 0xe8, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e,
	0x54, 0x69, 0x6d, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x61, 0x6e, 0x12, 0x2b,
	0x0a, 0x10, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x64, 0x44,
	0x65, 0x76, 0x18, 0xe9, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x54, 0x69, 0x6d, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x64, 0x44, 0x65, 0x76, 0x12, 0x21, 0x0a, 0x0b, 0x54,
	0x69, 0x6d, 0x65, 0x49, 0x64, 0x6c, 0x65, 0x4d, 0x69, 0x6e, 0x18, 0xea, 0x10, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x6c, 0x65, 0x4d, 0x69, 0x6e, 0x12, 0x21,
	0x0a, 0x0b, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x6c, 0x65, 0x4d, 0x61, 0x78, 0x18, 0xeb, 0x10,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x6c, 0x65, 0x4d, 0x61,
	0x78, 0x12, 0x23, 0x0a, 0x0c, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x6c, 0x65, 0x4d, 0x65, 0x61,
	0x6e, 0x18, 0xec, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x64,
	0x6c, 0x65, 0x4d, 0x65, 0x61, 0x6e, 0x12, 0x27, 0x0a, 0x0e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x64,
	0x6c, 0x65, 0x53, 0x74, 0x64, 0x44, 0x65, 0x76, 0x18, 0xed, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x6c, 0x65, 0x53, 0x74, 0x64, 0x44, 0x65, 0x76, 0x12,
	0x11, 0x0a, 0x03, 0x43, 0x69, 0x64, 0x18, 0xd0, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x43,
	0x69, 0x64, 0x12, 0x1d, 0x0a, 0x09, 0x43, 0x69, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0xd1, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x69, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x17, 0x0a, 0x06, 0x53, 0x72, 0x63, 0x43, 0x69, 0x64, 0x18, 0xdc, 0x0f, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x53, 0x72, 0x63, 0x43, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x06, 0x44, 0x73,
	0x74, 0x43, 0x69, 0x64, 0x18, 0xdd, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x44, 0x73, 0x74,
	0x43, 0x69, 0x64, 0x12, 0x46, 0x0a, 0x0b, 0x53, 0x72, 0x63, 0x41, 0x64, 0x64, 0x72, 0x41, 0x6e,
	0x6f, 0x6e, 0x18, 0xf0, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x66, 0x6c, 0x6f, 0x77,
	0x70, 0x62, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x2e,
	0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x53, 0x72, 0x63, 0x41, 0x64, 0x64, 0x72, 0x41, 0x6e, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0b, 0x44,
	0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x41, 0x6e, 0x6f, 0x6e, 0x18, 0xf1, 0x10, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x23, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x70, 0x62, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63,
	0x68, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x2e, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x69, 0x7a,
	0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x44, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x41,
	0x6e, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x13, 0x53, 0x72, 0x63, 0x41, 0x64, 0x64, 0x72, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x4c, 0x65, 0x6e, 0x18, 0xf2, 0x10, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x13, 0x53, 0x72, 0x63, 0x41, 0x64, 0x64, 0x72, 0x50, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x4c, 0x65, 0x6e, 0x12, 0x31, 0x0a, 0x13, 0x44, 0x73, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x50, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x4c, 0x65, 0x6e, 0x18, 0xf3, 0x10,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x44, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x4c, 0x65, 0x6e, 0x12, 0x4e, 0x0a, 0x0f, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x41, 0x6e, 0x6f, 0x6e, 0x18, 0xf4, 0x10, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x70, 0x62, 0x2e, 0x45, 0x6e, 0x72,
	0x69, 0x63, 0x68, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x2e, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d,
	0x69, 0x7a, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x41, 0x6e, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x21, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x41, 0x6e, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x18, 0xf5,
	0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x21, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x41, 0x6e, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x12, 0x46, 0x0a, 0x0b, 0x4e, 0x65, 0x78, 0x74,
	0x48, 0x6f, 0x70, 0x41, 0x6e, 0x6f, 0x6e, 0x18, 0xf6, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23,
	0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x70, 0x62, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x65, 0x64,
	0x46, 0x6c, 0x6f, 0x77, 0x2e, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0b, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x41, 0x6e, 0x6f, 0x6e,
	0x12, 0x45, 0x0a, 0x1d, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x41, 0x6e, 0x6f, 0x6e, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65,
	0x6e, 0x18, 0xf7, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f,
	0x70, 0x41, 0x6e, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x12, 0x11, 0x0a, 0x03, 0x4d, 0x65, 0x64, 0x18, 0xfc,
	0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x4d, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x09, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x66, 0x18, 0xfd, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x66, 0x12, 0x56, 0x0a, 0x10, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0xfe, 0x10,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x70, 0x62, 0x2e, 0x45, 0x6e,
	0x72, 0x69, 0x63, 0x68, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x10, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x25, 0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x18, 0xda, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0c, 0x53, 0x72, 0x63, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x57, 0x18, 0xde, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x53, 0x72, 0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x57, 0x12, 0x23, 0x0a,
	0x0c, 0x44, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x57, 0x18, 0xdf, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x42, 0x57, 0x12, 0x44, 0x0a, 0x0a, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x18, 0xd2, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x70, 0x62,
	0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x2e, 0x4e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x4e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0xd9, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x18, 0xdb, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x66,
	0x6c, 0x6f, 0x77, 0x70, 0x62, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x65, 0x64, 0x46, 0x6c,
	0x6f, 0x77, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x21, 0x0a,
	0x0b, 0x53, 0x72, 0x63, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x84, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x72, 0x63, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x21, 0x0a, 0x0b, 0x44, 0x73, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x85, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x73, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x0f, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x48, 0x6f,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x86, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4e,
	0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x09, 0x53, 0x72, 0x63, 0x41, 0x53, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x87, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x53, 0x72, 0x63, 0x41, 0x53, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x09, 0x44, 0x73, 0x74, 0x41, 0x53, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x88, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x44, 0x73, 0x74, 0x41, 0x53, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0d,
	0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x41, 0x53, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x89, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x41, 0x53, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x0f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x48, 0x6f,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x8a, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x09, 0x53, 0x72, 0x63, 0x49, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0xd3, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x53, 0x72, 0x63, 0x49, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x09, 0x53, 0x72, 0x63, 0x49, 0x66, 0x44, 0x65, 0x73, 0x63, 0x18, 0xd4, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x53, 0x72, 0x63, 0x49, 0x66, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1f, 0x0a, 0x0a,
	0x53, 0x72, 0x63, 0x49, 0x66, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0xd5, 0x0f, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x53, 0x72, 0x63, 0x49, 0x66, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x1d, 0x0a,
	0x09, 0x44, 0x73, 0x74, 0x49, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0xd6, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x44, 0x73, 0x74, 0x49, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x09,
	0x44, 0x73, 0x74, 0x49, 0x66, 0x44, 0x65, 0x73, 0x63, 0x18, 0xd7, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x44, 0x73, 0x74, 0x49, 0x66, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1f, 0x0a, 0x0a, 0x44,
	0x73, 0x74, 0x49, 0x66, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0xd8, 0x0f, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x44, 0x73, 0x74, 0x49, 0x66, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x13, 0x0a, 0x04,
	0x4e, 0x6f, 0x74, 0x65, 0x18, 0xe0, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x6f, 0x74,
	0x65, 0x12, 0x1b, 0x0a, 0x08, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x50, 0x18, 0xf2, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x50, 0x12, 0x25,
	0x0a, 0x0d, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x50, 0x18,
	0xf3, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x50, 0x12, 0x1d, 0x0a, 0x09, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70,
	0x49, 0x50, 0x18, 0xf4, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4e, 0x65, 0x78, 0x74, 0x48,
	0x6f, 0x70, 0x49, 0x50, 0x12, 0x1d, 0x0a, 0x09, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x49,
	0x50, 0x18, 0xf5, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x72, 0x49, 0x50, 0x12, 0x1d, 0x0a, 0x09, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x41, 0x43,
	0x18, 0xf6, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d,
	0x41, 0x43, 0x12, 0x27, 0x0a, 0x0e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x41, 0x43, 0x18, 0xf7, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x44, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x41, 0x43, 0x12, 0x27, 0x0a, 0x0e, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x56, 0x72, 0x66, 0x49, 0x44, 0x42, 0x57, 0x18, 0xeb, 0x13,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x56, 0x72, 0x66,
	0x49, 0x44, 0x42, 0x57, 0x12, 0x25, 0x0a, 0x0d, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x56, 0x72,
	0x66, 0x49, 0x44, 0x42, 0x57, 0x18, 0xec, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x45, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x56, 0x72, 0x66, 0x49, 0x44, 0x42, 0x57, 0x12, 0x25, 0x0a, 0x0d, 0x54,
	0x69, 0x6d, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0xea, 0x13, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x22, 0x5d, 0x0a, 0x08, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f,
	0x0a, 0x0b, 0x46, 0x4c, 0x4f, 0x57, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x53, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x35, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a,
	0x4e, 0x45, 0x54, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x56, 0x35, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a,
	0x4e, 0x45, 0x54, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x56, 0x39, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05,
	0x49, 0x50, 0x46, 0x49, 0x58, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x42, 0x50, 0x46, 0x10,
	0x05, 0x22, 0xc7, 0x01, 0x0a, 0x0a, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x12, 0x0c, 0x0a, 0x08, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x49, 0x50, 0x76, 0x34, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x50, 0x76, 0x36,
	0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x43, 0x50, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x55,
	0x44, 0x50, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x50, 0x4c, 0x53, 0x10, 0x05, 0x12, 0x09,
	0x0a, 0x05, 0x44, 0x6f, 0x74, 0x31, 0x51, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x43, 0x4d,
	0x50, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x43, 0x4d, 0x50, 0x76, 0x36, 0x10, 0x08, 0x12,
	0x07, 0x0a, 0x03, 0x47, 0x52, 0x45, 0x10, 0x09, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x50, 0x76, 0x36,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x0a, 0x12,
	0x16, 0x0a, 0x12, 0x49, 0x50, 0x76, 0x36, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x72, 0x61,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x0b, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x65, 0x6e, 0x65, 0x76,
	0x65, 0x10, 0x0c, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x65, 0x72, 0x65, 0x64, 0x6f, 0x10, 0x0d, 0x12,
	0x0a, 0x0a, 0x06, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x10, 0x63, 0x22, 0x32, 0x0a, 0x0e, 0x41,
	0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a,
	0x0d, 0x4e, 0x6f, 0x74, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x10, 0x00,
	0x12, 0x0d, 0x0a, 0x09, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x50, 0x41, 0x4e, 0x10, 0x01, 0x22,
	0x49, 0x0a, 0x14, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x01, 0x12,
	0x0c, 0x0a, 0x08, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x02, 0x12, 0x0b, 0x0a,
	0x07, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x03, 0x22, 0x21, 0x0a, 0x0e, 0x4e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x06, 0x0a, 0x02,
	0x4e, 0x6f, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x59, 0x65, 0x73, 0x10, 0x01, 0x22, 0x2f, 0x0a,
	0x0e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x4e, 0x65, 0x69, 0x74, 0x68, 0x65, 0x72, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03,
	0x53, 0x72, 0x63, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x73, 0x74, 0x10, 0x02, 0x42, 0x2d,
	0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x77, 0x4e,
	0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x2f, 0x70, 0x62, 0x3b, 0x66, 0x6c, 0x6f, 0x77, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_enrichedflow_proto_rawDescOnce sync.Once
	file_enrichedflow_proto_rawDescData = file_enrichedflow_proto_rawDesc
)

func file_enrichedflow_proto_rawDescGZIP() []byte {
	file_enrichedflow_proto_rawDescOnce.Do(func() {
		file_enrichedflow_proto_rawDescData = protoimpl.X.CompressGZIP(file_enrichedflow_proto_rawDescData)
	})
	return file_enrichedflow_proto_rawDescData
}

var file_enrichedflow_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_enrichedflow_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_enrichedflow_proto_goTypes = []any{
	(EnrichedFlow_FlowType)(0),             // 0: flowpb.EnrichedFlow.FlowType
	(EnrichedFlow_LayerStack)(0),           // 1: flowpb.EnrichedFlow.LayerStack
	(EnrichedFlow_AnonymizedType)(0),       // 2: flowpb.EnrichedFlow.AnonymizedType
	(EnrichedFlow_ValidationStatusType)(0), // 3: flowpb.EnrichedFlow.ValidationStatusType
	(EnrichedFlow_NormalizedType)(0),       // 4: flowpb.EnrichedFlow.NormalizedType
	(EnrichedFlow_RemoteAddrType)(0),       // 5: flowpb.EnrichedFlow.RemoteAddrType
	(*EnrichedFlow)(nil),                   // 6: flowpb.EnrichedFlow
}
var file_enrichedflow_proto_depIdxs = []int32{
	0, // 0: flowpb.EnrichedFlow.type:type_name -> flowpb.EnrichedFlow.FlowType
	1, // 1: flowpb.EnrichedFlow.layer_stack:type_name -> flowpb.EnrichedFlow.LayerStack
	2, // 2: flowpb.EnrichedFlow.SrcAddrAnon:type_name -> flowpb.EnrichedFlow.AnonymizedType
	2, // 3: flowpb.EnrichedFlow.DstAddrAnon:type_name -> flowpb.EnrichedFlow.AnonymizedType
	2, // 4: flowpb.EnrichedFlow.SamplerAddrAnon:type_name -> flowpb.EnrichedFlow.AnonymizedType
	2, // 5: flowpb.EnrichedFlow.NextHopAnon:type_name -> flowpb.EnrichedFlow.AnonymizedType
	3, // 6: flowpb.EnrichedFlow.ValidationStatus:type_name -> flowpb.EnrichedFlow.ValidationStatusType
	4, // 7: flowpb.EnrichedFlow.Normalized:type_name -> flowpb.EnrichedFlow.NormalizedType
	5, // 8: flowpb.EnrichedFlow.RemoteAddr:type_name -> flowpb.EnrichedFlow.RemoteAddrType
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_enrichedflow_proto_init() }
func file_enrichedflow_proto_init() {
	if File_enrichedflow_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_enrichedflow_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_enrichedflow_proto_goTypes,
		DependencyIndexes: file_enrichedflow_proto_depIdxs,
		EnumInfos:         file_enrichedflow_proto_enumTypes,
		MessageInfos:      file_enrichedflow_proto_msgTypes,
	}.Build()
	File_enrichedflow_proto = out.File
	file_enrichedflow_proto_rawDesc = nil
	file_enrichedflow_proto_goTypes = nil
	file_enrichedflow_proto_depIdxs = nil
}
