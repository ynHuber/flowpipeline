// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v3.21.12
// source: legacyenrichedflow.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LegacyEnrichedFlow_FlowType int32

const (
	LegacyEnrichedFlow_FLOWUNKNOWN LegacyEnrichedFlow_FlowType = 0
	LegacyEnrichedFlow_SFLOW_5     LegacyEnrichedFlow_FlowType = 1
	LegacyEnrichedFlow_NETFLOW_V5  LegacyEnrichedFlow_FlowType = 2
	LegacyEnrichedFlow_NETFLOW_V9  LegacyEnrichedFlow_FlowType = 3
	LegacyEnrichedFlow_IPFIX       LegacyEnrichedFlow_FlowType = 4
	LegacyEnrichedFlow_EBPF        LegacyEnrichedFlow_FlowType = 5
)

// Enum value maps for LegacyEnrichedFlow_FlowType.
var (
	LegacyEnrichedFlow_FlowType_name = map[int32]string{
		0: "FLOWUNKNOWN",
		1: "SFLOW_5",
		2: "NETFLOW_V5",
		3: "NETFLOW_V9",
		4: "IPFIX",
		5: "EBPF",
	}
	LegacyEnrichedFlow_FlowType_value = map[string]int32{
		"FLOWUNKNOWN": 0,
		"SFLOW_5":     1,
		"NETFLOW_V5":  2,
		"NETFLOW_V9":  3,
		"IPFIX":       4,
		"EBPF":        5,
	}
)

func (x LegacyEnrichedFlow_FlowType) Enum() *LegacyEnrichedFlow_FlowType {
	p := new(LegacyEnrichedFlow_FlowType)
	*p = x
	return p
}

func (x LegacyEnrichedFlow_FlowType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LegacyEnrichedFlow_FlowType) Descriptor() protoreflect.EnumDescriptor {
	return file_legacyenrichedflow_proto_enumTypes[0].Descriptor()
}

func (LegacyEnrichedFlow_FlowType) Type() protoreflect.EnumType {
	return &file_legacyenrichedflow_proto_enumTypes[0]
}

func (x LegacyEnrichedFlow_FlowType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LegacyEnrichedFlow_FlowType.Descriptor instead.
func (LegacyEnrichedFlow_FlowType) EnumDescriptor() ([]byte, []int) {
	return file_legacyenrichedflow_proto_rawDescGZIP(), []int{0, 0}
}

// modify/anonymize
type LegacyEnrichedFlow_AnonymizedType int32

const (
	LegacyEnrichedFlow_NotAnonymized LegacyEnrichedFlow_AnonymizedType = 0
	LegacyEnrichedFlow_CryptoPAN     LegacyEnrichedFlow_AnonymizedType = 1
)

// Enum value maps for LegacyEnrichedFlow_AnonymizedType.
var (
	LegacyEnrichedFlow_AnonymizedType_name = map[int32]string{
		0: "NotAnonymized",
		1: "CryptoPAN",
	}
	LegacyEnrichedFlow_AnonymizedType_value = map[string]int32{
		"NotAnonymized": 0,
		"CryptoPAN":     1,
	}
)

func (x LegacyEnrichedFlow_AnonymizedType) Enum() *LegacyEnrichedFlow_AnonymizedType {
	p := new(LegacyEnrichedFlow_AnonymizedType)
	*p = x
	return p
}

func (x LegacyEnrichedFlow_AnonymizedType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LegacyEnrichedFlow_AnonymizedType) Descriptor() protoreflect.EnumDescriptor {
	return file_legacyenrichedflow_proto_enumTypes[1].Descriptor()
}

func (LegacyEnrichedFlow_AnonymizedType) Type() protoreflect.EnumType {
	return &file_legacyenrichedflow_proto_enumTypes[1]
}

func (x LegacyEnrichedFlow_AnonymizedType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LegacyEnrichedFlow_AnonymizedType.Descriptor instead.
func (LegacyEnrichedFlow_AnonymizedType) EnumDescriptor() ([]byte, []int) {
	return file_legacyenrichedflow_proto_rawDescGZIP(), []int{0, 1}
}

type LegacyEnrichedFlow_ValidationStatusType int32

const (
	LegacyEnrichedFlow_Unknown  LegacyEnrichedFlow_ValidationStatusType = 0
	LegacyEnrichedFlow_Valid    LegacyEnrichedFlow_ValidationStatusType = 1
	LegacyEnrichedFlow_NotFound LegacyEnrichedFlow_ValidationStatusType = 2
	LegacyEnrichedFlow_Invalid  LegacyEnrichedFlow_ValidationStatusType = 3
)

// Enum value maps for LegacyEnrichedFlow_ValidationStatusType.
var (
	LegacyEnrichedFlow_ValidationStatusType_name = map[int32]string{
		0: "Unknown",
		1: "Valid",
		2: "NotFound",
		3: "Invalid",
	}
	LegacyEnrichedFlow_ValidationStatusType_value = map[string]int32{
		"Unknown":  0,
		"Valid":    1,
		"NotFound": 2,
		"Invalid":  3,
	}
)

func (x LegacyEnrichedFlow_ValidationStatusType) Enum() *LegacyEnrichedFlow_ValidationStatusType {
	p := new(LegacyEnrichedFlow_ValidationStatusType)
	*p = x
	return p
}

func (x LegacyEnrichedFlow_ValidationStatusType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LegacyEnrichedFlow_ValidationStatusType) Descriptor() protoreflect.EnumDescriptor {
	return file_legacyenrichedflow_proto_enumTypes[2].Descriptor()
}

func (LegacyEnrichedFlow_ValidationStatusType) Type() protoreflect.EnumType {
	return &file_legacyenrichedflow_proto_enumTypes[2]
}

func (x LegacyEnrichedFlow_ValidationStatusType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LegacyEnrichedFlow_ValidationStatusType.Descriptor instead.
func (LegacyEnrichedFlow_ValidationStatusType) EnumDescriptor() ([]byte, []int) {
	return file_legacyenrichedflow_proto_rawDescGZIP(), []int{0, 2}
}

// modify/normalize
type LegacyEnrichedFlow_NormalizedType int32

const (
	LegacyEnrichedFlow_No  LegacyEnrichedFlow_NormalizedType = 0
	LegacyEnrichedFlow_Yes LegacyEnrichedFlow_NormalizedType = 1
)

// Enum value maps for LegacyEnrichedFlow_NormalizedType.
var (
	LegacyEnrichedFlow_NormalizedType_name = map[int32]string{
		0: "No",
		1: "Yes",
	}
	LegacyEnrichedFlow_NormalizedType_value = map[string]int32{
		"No":  0,
		"Yes": 1,
	}
)

func (x LegacyEnrichedFlow_NormalizedType) Enum() *LegacyEnrichedFlow_NormalizedType {
	p := new(LegacyEnrichedFlow_NormalizedType)
	*p = x
	return p
}

func (x LegacyEnrichedFlow_NormalizedType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LegacyEnrichedFlow_NormalizedType) Descriptor() protoreflect.EnumDescriptor {
	return file_legacyenrichedflow_proto_enumTypes[3].Descriptor()
}

func (LegacyEnrichedFlow_NormalizedType) Type() protoreflect.EnumType {
	return &file_legacyenrichedflow_proto_enumTypes[3]
}

func (x LegacyEnrichedFlow_NormalizedType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LegacyEnrichedFlow_NormalizedType.Descriptor instead.
func (LegacyEnrichedFlow_NormalizedType) EnumDescriptor() ([]byte, []int) {
	return file_legacyenrichedflow_proto_rawDescGZIP(), []int{0, 3}
}

// modify/remoteaddress
type LegacyEnrichedFlow_RemoteAddrType int32

const (
	LegacyEnrichedFlow_Neither LegacyEnrichedFlow_RemoteAddrType = 0
	LegacyEnrichedFlow_Src     LegacyEnrichedFlow_RemoteAddrType = 1
	LegacyEnrichedFlow_Dst     LegacyEnrichedFlow_RemoteAddrType = 2
)

// Enum value maps for LegacyEnrichedFlow_RemoteAddrType.
var (
	LegacyEnrichedFlow_RemoteAddrType_name = map[int32]string{
		0: "Neither",
		1: "Src",
		2: "Dst",
	}
	LegacyEnrichedFlow_RemoteAddrType_value = map[string]int32{
		"Neither": 0,
		"Src":     1,
		"Dst":     2,
	}
)

func (x LegacyEnrichedFlow_RemoteAddrType) Enum() *LegacyEnrichedFlow_RemoteAddrType {
	p := new(LegacyEnrichedFlow_RemoteAddrType)
	*p = x
	return p
}

func (x LegacyEnrichedFlow_RemoteAddrType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LegacyEnrichedFlow_RemoteAddrType) Descriptor() protoreflect.EnumDescriptor {
	return file_legacyenrichedflow_proto_enumTypes[4].Descriptor()
}

func (LegacyEnrichedFlow_RemoteAddrType) Type() protoreflect.EnumType {
	return &file_legacyenrichedflow_proto_enumTypes[4]
}

func (x LegacyEnrichedFlow_RemoteAddrType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LegacyEnrichedFlow_RemoteAddrType.Descriptor instead.
func (LegacyEnrichedFlow_RemoteAddrType) EnumDescriptor() ([]byte, []int) {
	return file_legacyenrichedflow_proto_rawDescGZIP(), []int{0, 4}
}

type LegacyEnrichedFlow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type          LegacyEnrichedFlow_FlowType `protobuf:"varint,1,opt,name=Type,proto3,enum=flowpb.LegacyEnrichedFlow_FlowType" json:"Type,omitempty"`
	TimeReceived  uint64                      `protobuf:"varint,2,opt,name=TimeReceived,proto3" json:"TimeReceived,omitempty"`
	SequenceNum   uint32                      `protobuf:"varint,4,opt,name=SequenceNum,proto3" json:"SequenceNum,omitempty"`
	SamplingRate  uint64                      `protobuf:"varint,3,opt,name=SamplingRate,proto3" json:"SamplingRate,omitempty"`
	FlowDirection uint32                      `protobuf:"varint,42,opt,name=FlowDirection,proto3" json:"FlowDirection,omitempty"`
	// Sampler information
	SamplerAddress []byte `protobuf:"bytes,11,opt,name=SamplerAddress,proto3" json:"SamplerAddress,omitempty"`
	// Found inside packet
	TimeFlowStart uint64 `protobuf:"varint,38,opt,name=TimeFlowStart,proto3" json:"TimeFlowStart,omitempty"`
	TimeFlowEnd   uint64 `protobuf:"varint,5,opt,name=TimeFlowEnd,proto3" json:"TimeFlowEnd,omitempty"`
	// Size of the sampled packet
	Bytes   uint64 `protobuf:"varint,9,opt,name=Bytes,proto3" json:"Bytes,omitempty"`
	Packets uint64 `protobuf:"varint,10,opt,name=Packets,proto3" json:"Packets,omitempty"`
	// Source/destination addresses
	SrcAddr []byte `protobuf:"bytes,6,opt,name=SrcAddr,proto3" json:"SrcAddr,omitempty"`
	DstAddr []byte `protobuf:"bytes,7,opt,name=DstAddr,proto3" json:"DstAddr,omitempty"`
	// Layer 3 protocol (IPv4/IPv6/ARP/MPLS...)
	Etype uint32 `protobuf:"varint,30,opt,name=Etype,proto3" json:"Etype,omitempty"`
	// Layer 4 protocol
	Proto uint32 `protobuf:"varint,20,opt,name=Proto,proto3" json:"Proto,omitempty"`
	// Ports for UDP and TCP
	SrcPort uint32 `protobuf:"varint,21,opt,name=SrcPort,proto3" json:"SrcPort,omitempty"`
	DstPort uint32 `protobuf:"varint,22,opt,name=DstPort,proto3" json:"DstPort,omitempty"`
	// Interfaces
	InIf  uint32 `protobuf:"varint,18,opt,name=InIf,proto3" json:"InIf,omitempty"`
	OutIf uint32 `protobuf:"varint,19,opt,name=OutIf,proto3" json:"OutIf,omitempty"`
	// Ethernet information
	SrcMac uint64 `protobuf:"varint,27,opt,name=SrcMac,proto3" json:"SrcMac,omitempty"`
	DstMac uint64 `protobuf:"varint,28,opt,name=DstMac,proto3" json:"DstMac,omitempty"`
	// Vlan
	SrcVlan uint32 `protobuf:"varint,33,opt,name=SrcVlan,proto3" json:"SrcVlan,omitempty"`
	DstVlan uint32 `protobuf:"varint,34,opt,name=DstVlan,proto3" json:"DstVlan,omitempty"`
	// 802.1q VLAN in sampled packet
	VlanId uint32 `protobuf:"varint,29,opt,name=VlanId,proto3" json:"VlanId,omitempty"`
	// VRF
	IngressVrfID uint32 `protobuf:"varint,39,opt,name=IngressVrfID,proto3" json:"IngressVrfID,omitempty"`
	EgressVrfID  uint32 `protobuf:"varint,40,opt,name=EgressVrfID,proto3" json:"EgressVrfID,omitempty"`
	// IP and TCP special flags
	IPTos            uint32 `protobuf:"varint,23,opt,name=IPTos,proto3" json:"IPTos,omitempty"`
	ForwardingStatus uint32 `protobuf:"varint,24,opt,name=ForwardingStatus,proto3" json:"ForwardingStatus,omitempty"`
	IPTTL            uint32 `protobuf:"varint,25,opt,name=IPTTL,proto3" json:"IPTTL,omitempty"`
	TCPFlags         uint32 `protobuf:"varint,26,opt,name=TCPFlags,proto3" json:"TCPFlags,omitempty"`
	IcmpType         uint32 `protobuf:"varint,31,opt,name=IcmpType,proto3" json:"IcmpType,omitempty"`
	IcmpCode         uint32 `protobuf:"varint,32,opt,name=IcmpCode,proto3" json:"IcmpCode,omitempty"`
	IPv6FlowLabel    uint32 `protobuf:"varint,37,opt,name=IPv6FlowLabel,proto3" json:"IPv6FlowLabel,omitempty"`
	// Fragments (IPv4/IPv6)
	FragmentId      uint32 `protobuf:"varint,35,opt,name=FragmentId,proto3" json:"FragmentId,omitempty"`
	FragmentOffset  uint32 `protobuf:"varint,36,opt,name=FragmentOffset,proto3" json:"FragmentOffset,omitempty"`
	BiFlowDirection uint32 `protobuf:"varint,41,opt,name=BiFlowDirection,proto3" json:"BiFlowDirection,omitempty"`
	// Autonomous system information
	SrcAS     uint32 `protobuf:"varint,14,opt,name=SrcAS,proto3" json:"SrcAS,omitempty"`
	DstAS     uint32 `protobuf:"varint,15,opt,name=DstAS,proto3" json:"DstAS,omitempty"`
	NextHop   []byte `protobuf:"bytes,12,opt,name=NextHop,proto3" json:"NextHop,omitempty"`
	NextHopAS uint32 `protobuf:"varint,13,opt,name=NextHopAS,proto3" json:"NextHopAS,omitempty"`
	// Prefix size
	SrcNet uint32 `protobuf:"varint,16,opt,name=SrcNet,proto3" json:"SrcNet,omitempty"`
	DstNet uint32 `protobuf:"varint,17,opt,name=DstNet,proto3" json:"DstNet,omitempty"`
	// MPLS information
	HasMPLS           bool   `protobuf:"varint,53,opt,name=HasMPLS,proto3" json:"HasMPLS,omitempty"`
	MPLSCount         uint32 `protobuf:"varint,54,opt,name=MPLSCount,proto3" json:"MPLSCount,omitempty"`
	MPLS1TTL          uint32 `protobuf:"varint,55,opt,name=MPLS1TTL,proto3" json:"MPLS1TTL,omitempty"`                     // First TTL
	MPLS1Label        uint32 `protobuf:"varint,56,opt,name=MPLS1Label,proto3" json:"MPLS1Label,omitempty"`                 // First Label
	MPLS2TTL          uint32 `protobuf:"varint,57,opt,name=MPLS2TTL,proto3" json:"MPLS2TTL,omitempty"`                     // Second TTL
	MPLS2Label        uint32 `protobuf:"varint,58,opt,name=MPLS2Label,proto3" json:"MPLS2Label,omitempty"`                 // Second Label
	MPLS3TTL          uint32 `protobuf:"varint,59,opt,name=MPLS3TTL,proto3" json:"MPLS3TTL,omitempty"`                     // Third TTL
	MPLS3Label        uint32 `protobuf:"varint,60,opt,name=MPLS3Label,proto3" json:"MPLS3Label,omitempty"`                 // Third Label
	MPLSLastTTL       uint32 `protobuf:"varint,61,opt,name=MPLSLastTTL,proto3" json:"MPLSLastTTL,omitempty"`               // Last TTL
	MPLSLastLabel     uint32 `protobuf:"varint,62,opt,name=MPLSLastLabel,proto3" json:"MPLSLastLabel,omitempty"`           // Last Label
	PacketBytesMin    uint32 `protobuf:"varint,1100,opt,name=PacketBytesMin,proto3" json:"PacketBytesMin,omitempty"`       // new, single packet means uint32 < MTU
	PacketBytesMax    uint32 `protobuf:"varint,1101,opt,name=PacketBytesMax,proto3" json:"PacketBytesMax,omitempty"`       // new
	PacketBytesMean   uint32 `protobuf:"varint,1102,opt,name=PacketBytesMean,proto3" json:"PacketBytesMean,omitempty"`     // new
	PacketBytesStdDev uint32 `protobuf:"varint,1103,opt,name=PacketBytesStdDev,proto3" json:"PacketBytesStdDev,omitempty"` // new
	PacketIATMin      uint64 `protobuf:"varint,1110,opt,name=PacketIATMin,proto3" json:"PacketIATMin,omitempty"`           // new
	PacketIATMax      uint64 `protobuf:"varint,1111,opt,name=PacketIATMax,proto3" json:"PacketIATMax,omitempty"`           // new
	PacketIATMean     uint64 `protobuf:"varint,1112,opt,name=PacketIATMean,proto3" json:"PacketIATMean,omitempty"`         // new
	PacketIATStdDev   uint64 `protobuf:"varint,1113,opt,name=PacketIATStdDev,proto3" json:"PacketIATStdDev,omitempty"`     // new
	HeaderBytes       uint32 `protobuf:"varint,1120,opt,name=HeaderBytes,proto3" json:"HeaderBytes,omitempty"`             // new
	FINFlagCount      uint64 `protobuf:"varint,1130,opt,name=FINFlagCount,proto3" json:"FINFlagCount,omitempty"`           // new
	SYNFlagCount      uint64 `protobuf:"varint,1131,opt,name=SYNFlagCount,proto3" json:"SYNFlagCount,omitempty"`           // new
	RSTFlagCount      uint64 `protobuf:"varint,1132,opt,name=RSTFlagCount,proto3" json:"RSTFlagCount,omitempty"`           // new
	PSHFlagCount      uint64 `protobuf:"varint,1133,opt,name=PSHFlagCount,proto3" json:"PSHFlagCount,omitempty"`           // new
	ACKFlagCount      uint64 `protobuf:"varint,1134,opt,name=ACKFlagCount,proto3" json:"ACKFlagCount,omitempty"`           // new
	URGFlagCount      uint64 `protobuf:"varint,1135,opt,name=URGFlagCount,proto3" json:"URGFlagCount,omitempty"`           // new
	CWRFlagCount      uint64 `protobuf:"varint,1136,opt,name=CWRFlagCount,proto3" json:"CWRFlagCount,omitempty"`           // new
	ECEFlagCount      uint64 `protobuf:"varint,1137,opt,name=ECEFlagCount,proto3" json:"ECEFlagCount,omitempty"`           // new
	PayloadPackets    uint64 `protobuf:"varint,1140,opt,name=PayloadPackets,proto3" json:"PayloadPackets,omitempty"`       // new
	TimeActiveMin     uint64 `protobuf:"varint,1150,opt,name=TimeActiveMin,proto3" json:"TimeActiveMin,omitempty"`         // new
	TimeActiveMax     uint64 `protobuf:"varint,1151,opt,name=TimeActiveMax,proto3" json:"TimeActiveMax,omitempty"`         // new
	TimeActiveMean    uint64 `protobuf:"varint,1152,opt,name=TimeActiveMean,proto3" json:"TimeActiveMean,omitempty"`       // new
	TimeActiveStdDev  uint64 `protobuf:"varint,1153,opt,name=TimeActiveStdDev,proto3" json:"TimeActiveStdDev,omitempty"`   // new
	TimeIdleMin       uint64 `protobuf:"varint,1154,opt,name=TimeIdleMin,proto3" json:"TimeIdleMin,omitempty"`             // new
	TimeIdleMax       uint64 `protobuf:"varint,1155,opt,name=TimeIdleMax,proto3" json:"TimeIdleMax,omitempty"`             // new
	TimeIdleMean      uint64 `protobuf:"varint,1156,opt,name=TimeIdleMean,proto3" json:"TimeIdleMean,omitempty"`           // new
	TimeIdleStdDev    uint64 `protobuf:"varint,1157,opt,name=TimeIdleStdDev,proto3" json:"TimeIdleStdDev,omitempty"`       // new
	// modify/addcid
	Cid                               uint32                            `protobuf:"varint,1000,opt,name=Cid,proto3" json:"Cid,omitempty"`            // TODO: deprecate and provide as helper?
	CidString                         string                            `protobuf:"bytes,1001,opt,name=CidString,proto3" json:"CidString,omitempty"` // deprecated, delete for v1.0.0
	SrcCid                            uint32                            `protobuf:"varint,1012,opt,name=SrcCid,proto3" json:"SrcCid,omitempty"`
	DstCid                            uint32                            `protobuf:"varint,1013,opt,name=DstCid,proto3" json:"DstCid,omitempty"`
	SrcAddrAnon                       LegacyEnrichedFlow_AnonymizedType `protobuf:"varint,1160,opt,name=SrcAddrAnon,proto3,enum=flowpb.LegacyEnrichedFlow_AnonymizedType" json:"SrcAddrAnon,omitempty"`
	DstAddrAnon                       LegacyEnrichedFlow_AnonymizedType `protobuf:"varint,1161,opt,name=DstAddrAnon,proto3,enum=flowpb.LegacyEnrichedFlow_AnonymizedType" json:"DstAddrAnon,omitempty"`
	SrcAddrPreservedLen               uint32                            `protobuf:"varint,1162,opt,name=SrcAddrPreservedLen,proto3" json:"SrcAddrPreservedLen,omitempty"`
	DstAddrPreservedLen               uint32                            `protobuf:"varint,1163,opt,name=DstAddrPreservedLen,proto3" json:"DstAddrPreservedLen,omitempty"`
	SamplerAddrAnon                   LegacyEnrichedFlow_AnonymizedType `protobuf:"varint,1164,opt,name=SamplerAddrAnon,proto3,enum=flowpb.LegacyEnrichedFlow_AnonymizedType" json:"SamplerAddrAnon,omitempty"`
	SamplerAddrAnonPreservedPrefixLen uint32                            `protobuf:"varint,1165,opt,name=SamplerAddrAnonPreservedPrefixLen,proto3" json:"SamplerAddrAnonPreservedPrefixLen,omitempty"`
	// modify/bgp
	// as done by a number of Netflow implementations, these refer to the destination
	ASPath           []uint32                                `protobuf:"varint,1171,rep,packed,name=ASPath,proto3" json:"ASPath,omitempty"`
	Med              uint32                                  `protobuf:"varint,1172,opt,name=Med,proto3" json:"Med,omitempty"`
	LocalPref        uint32                                  `protobuf:"varint,1173,opt,name=LocalPref,proto3" json:"LocalPref,omitempty"`
	ValidationStatus LegacyEnrichedFlow_ValidationStatusType `protobuf:"varint,1174,opt,name=ValidationStatus,proto3,enum=flowpb.LegacyEnrichedFlow_ValidationStatusType" json:"ValidationStatus,omitempty"`
	// modify/geolocation
	RemoteCountry string                            `protobuf:"bytes,1010,opt,name=RemoteCountry,proto3" json:"RemoteCountry,omitempty"` // TODO: deprecate and provide as helper
	SrcCountry    string                            `protobuf:"bytes,1014,opt,name=SrcCountry,proto3" json:"SrcCountry,omitempty"`
	DstCountry    string                            `protobuf:"bytes,1015,opt,name=DstCountry,proto3" json:"DstCountry,omitempty"`
	Normalized    LegacyEnrichedFlow_NormalizedType `protobuf:"varint,1002,opt,name=Normalized,proto3,enum=flowpb.LegacyEnrichedFlow_NormalizedType" json:"Normalized,omitempty"` // TODO: deprecate and replace with helper?
	// modify/protomap
	ProtoName  string                            `protobuf:"bytes,1009,opt,name=ProtoName,proto3" json:"ProtoName,omitempty"`                                                  // TODO: deprecate and replace with helper, why lug a string along...
	RemoteAddr LegacyEnrichedFlow_RemoteAddrType `protobuf:"varint,1011,opt,name=RemoteAddr,proto3,enum=flowpb.LegacyEnrichedFlow_RemoteAddrType" json:"RemoteAddr,omitempty"` // TODO: figure out a better system? applicable only to service providers right now...
	// modify/reversedns
	SrcHostName     string `protobuf:"bytes,1180,opt,name=SrcHostName,proto3" json:"SrcHostName,omitempty"`
	DstHostName     string `protobuf:"bytes,1181,opt,name=DstHostName,proto3" json:"DstHostName,omitempty"`
	NextHopHostName string `protobuf:"bytes,1182,opt,name=NextHopHostName,proto3" json:"NextHopHostName,omitempty"`
	SrcASName       string `protobuf:"bytes,1183,opt,name=SrcASName,proto3" json:"SrcASName,omitempty"`
	DstASName       string `protobuf:"bytes,1184,opt,name=DstASName,proto3" json:"DstASName,omitempty"`
	NextHopASName   string `protobuf:"bytes,1185,opt,name=NextHopASName,proto3" json:"NextHopASName,omitempty"`
	SamplerHostName string `protobuf:"bytes,1186,opt,name=SamplerHostName,proto3" json:"SamplerHostName,omitempty"`
	// modify/snmp
	SrcIfName  string `protobuf:"bytes,1003,opt,name=SrcIfName,proto3" json:"SrcIfName,omitempty"`    // TODO: rename to match InIf and OutIf
	SrcIfDesc  string `protobuf:"bytes,1004,opt,name=SrcIfDesc,proto3" json:"SrcIfDesc,omitempty"`    // TODO: rename to match InIf and OutIf
	SrcIfSpeed uint32 `protobuf:"varint,1005,opt,name=SrcIfSpeed,proto3" json:"SrcIfSpeed,omitempty"` // TODO: rename to match InIf and OutIf
	DstIfName  string `protobuf:"bytes,1006,opt,name=DstIfName,proto3" json:"DstIfName,omitempty"`    // TODO: rename to match InIf and OutIf
	DstIfDesc  string `protobuf:"bytes,1007,opt,name=DstIfDesc,proto3" json:"DstIfDesc,omitempty"`    // TODO: rename to match InIf and OutIf
	DstIfSpeed uint32 `protobuf:"varint,1008,opt,name=DstIfSpeed,proto3" json:"DstIfSpeed,omitempty"` // TODO: rename to match InIf and OutIf
	// general
	Note string `protobuf:"bytes,1016,opt,name=Note,proto3" json:"Note,omitempty"` // free-form field to implement anything
	// modify/addrstrings
	SourceIP       string `protobuf:"bytes,1290,opt,name=SourceIP,proto3" json:"SourceIP,omitempty"`
	DestinationIP  string `protobuf:"bytes,1291,opt,name=DestinationIP,proto3" json:"DestinationIP,omitempty"`
	NextHopIP      string `protobuf:"bytes,1292,opt,name=NextHopIP,proto3" json:"NextHopIP,omitempty"`
	SamplerIP      string `protobuf:"bytes,1293,opt,name=SamplerIP,proto3" json:"SamplerIP,omitempty"`
	SourceMAC      string `protobuf:"bytes,1294,opt,name=SourceMAC,proto3" json:"SourceMAC,omitempty"`
	DestinationMAC string `protobuf:"bytes,1295,opt,name=DestinationMAC,proto3" json:"DestinationMAC,omitempty"`
}

func (x *LegacyEnrichedFlow) Reset() {
	*x = LegacyEnrichedFlow{}
	mi := &file_legacyenrichedflow_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LegacyEnrichedFlow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LegacyEnrichedFlow) ProtoMessage() {}

func (x *LegacyEnrichedFlow) ProtoReflect() protoreflect.Message {
	mi := &file_legacyenrichedflow_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LegacyEnrichedFlow.ProtoReflect.Descriptor instead.
func (*LegacyEnrichedFlow) Descriptor() ([]byte, []int) {
	return file_legacyenrichedflow_proto_rawDescGZIP(), []int{0}
}

func (x *LegacyEnrichedFlow) GetType() LegacyEnrichedFlow_FlowType {
	if x != nil {
		return x.Type
	}
	return LegacyEnrichedFlow_FLOWUNKNOWN
}

func (x *LegacyEnrichedFlow) GetTimeReceived() uint64 {
	if x != nil {
		return x.TimeReceived
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetSequenceNum() uint32 {
	if x != nil {
		return x.SequenceNum
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetSamplingRate() uint64 {
	if x != nil {
		return x.SamplingRate
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetFlowDirection() uint32 {
	if x != nil {
		return x.FlowDirection
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetSamplerAddress() []byte {
	if x != nil {
		return x.SamplerAddress
	}
	return nil
}

func (x *LegacyEnrichedFlow) GetTimeFlowStart() uint64 {
	if x != nil {
		return x.TimeFlowStart
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetTimeFlowEnd() uint64 {
	if x != nil {
		return x.TimeFlowEnd
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetBytes() uint64 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetPackets() uint64 {
	if x != nil {
		return x.Packets
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetSrcAddr() []byte {
	if x != nil {
		return x.SrcAddr
	}
	return nil
}

func (x *LegacyEnrichedFlow) GetDstAddr() []byte {
	if x != nil {
		return x.DstAddr
	}
	return nil
}

func (x *LegacyEnrichedFlow) GetEtype() uint32 {
	if x != nil {
		return x.Etype
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetProto() uint32 {
	if x != nil {
		return x.Proto
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetSrcPort() uint32 {
	if x != nil {
		return x.SrcPort
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetDstPort() uint32 {
	if x != nil {
		return x.DstPort
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetInIf() uint32 {
	if x != nil {
		return x.InIf
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetOutIf() uint32 {
	if x != nil {
		return x.OutIf
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetSrcMac() uint64 {
	if x != nil {
		return x.SrcMac
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetDstMac() uint64 {
	if x != nil {
		return x.DstMac
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetSrcVlan() uint32 {
	if x != nil {
		return x.SrcVlan
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetDstVlan() uint32 {
	if x != nil {
		return x.DstVlan
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetVlanId() uint32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetIngressVrfID() uint32 {
	if x != nil {
		return x.IngressVrfID
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetEgressVrfID() uint32 {
	if x != nil {
		return x.EgressVrfID
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetIPTos() uint32 {
	if x != nil {
		return x.IPTos
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetForwardingStatus() uint32 {
	if x != nil {
		return x.ForwardingStatus
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetIPTTL() uint32 {
	if x != nil {
		return x.IPTTL
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetTCPFlags() uint32 {
	if x != nil {
		return x.TCPFlags
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetIcmpType() uint32 {
	if x != nil {
		return x.IcmpType
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetIcmpCode() uint32 {
	if x != nil {
		return x.IcmpCode
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetIPv6FlowLabel() uint32 {
	if x != nil {
		return x.IPv6FlowLabel
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetFragmentId() uint32 {
	if x != nil {
		return x.FragmentId
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetFragmentOffset() uint32 {
	if x != nil {
		return x.FragmentOffset
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetBiFlowDirection() uint32 {
	if x != nil {
		return x.BiFlowDirection
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetSrcAS() uint32 {
	if x != nil {
		return x.SrcAS
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetDstAS() uint32 {
	if x != nil {
		return x.DstAS
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetNextHop() []byte {
	if x != nil {
		return x.NextHop
	}
	return nil
}

func (x *LegacyEnrichedFlow) GetNextHopAS() uint32 {
	if x != nil {
		return x.NextHopAS
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetSrcNet() uint32 {
	if x != nil {
		return x.SrcNet
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetDstNet() uint32 {
	if x != nil {
		return x.DstNet
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetHasMPLS() bool {
	if x != nil {
		return x.HasMPLS
	}
	return false
}

func (x *LegacyEnrichedFlow) GetMPLSCount() uint32 {
	if x != nil {
		return x.MPLSCount
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetMPLS1TTL() uint32 {
	if x != nil {
		return x.MPLS1TTL
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetMPLS1Label() uint32 {
	if x != nil {
		return x.MPLS1Label
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetMPLS2TTL() uint32 {
	if x != nil {
		return x.MPLS2TTL
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetMPLS2Label() uint32 {
	if x != nil {
		return x.MPLS2Label
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetMPLS3TTL() uint32 {
	if x != nil {
		return x.MPLS3TTL
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetMPLS3Label() uint32 {
	if x != nil {
		return x.MPLS3Label
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetMPLSLastTTL() uint32 {
	if x != nil {
		return x.MPLSLastTTL
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetMPLSLastLabel() uint32 {
	if x != nil {
		return x.MPLSLastLabel
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetPacketBytesMin() uint32 {
	if x != nil {
		return x.PacketBytesMin
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetPacketBytesMax() uint32 {
	if x != nil {
		return x.PacketBytesMax
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetPacketBytesMean() uint32 {
	if x != nil {
		return x.PacketBytesMean
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetPacketBytesStdDev() uint32 {
	if x != nil {
		return x.PacketBytesStdDev
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetPacketIATMin() uint64 {
	if x != nil {
		return x.PacketIATMin
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetPacketIATMax() uint64 {
	if x != nil {
		return x.PacketIATMax
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetPacketIATMean() uint64 {
	if x != nil {
		return x.PacketIATMean
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetPacketIATStdDev() uint64 {
	if x != nil {
		return x.PacketIATStdDev
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetHeaderBytes() uint32 {
	if x != nil {
		return x.HeaderBytes
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetFINFlagCount() uint64 {
	if x != nil {
		return x.FINFlagCount
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetSYNFlagCount() uint64 {
	if x != nil {
		return x.SYNFlagCount
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetRSTFlagCount() uint64 {
	if x != nil {
		return x.RSTFlagCount
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetPSHFlagCount() uint64 {
	if x != nil {
		return x.PSHFlagCount
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetACKFlagCount() uint64 {
	if x != nil {
		return x.ACKFlagCount
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetURGFlagCount() uint64 {
	if x != nil {
		return x.URGFlagCount
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetCWRFlagCount() uint64 {
	if x != nil {
		return x.CWRFlagCount
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetECEFlagCount() uint64 {
	if x != nil {
		return x.ECEFlagCount
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetPayloadPackets() uint64 {
	if x != nil {
		return x.PayloadPackets
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetTimeActiveMin() uint64 {
	if x != nil {
		return x.TimeActiveMin
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetTimeActiveMax() uint64 {
	if x != nil {
		return x.TimeActiveMax
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetTimeActiveMean() uint64 {
	if x != nil {
		return x.TimeActiveMean
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetTimeActiveStdDev() uint64 {
	if x != nil {
		return x.TimeActiveStdDev
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetTimeIdleMin() uint64 {
	if x != nil {
		return x.TimeIdleMin
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetTimeIdleMax() uint64 {
	if x != nil {
		return x.TimeIdleMax
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetTimeIdleMean() uint64 {
	if x != nil {
		return x.TimeIdleMean
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetTimeIdleStdDev() uint64 {
	if x != nil {
		return x.TimeIdleStdDev
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetCid() uint32 {
	if x != nil {
		return x.Cid
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetCidString() string {
	if x != nil {
		return x.CidString
	}
	return ""
}

func (x *LegacyEnrichedFlow) GetSrcCid() uint32 {
	if x != nil {
		return x.SrcCid
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetDstCid() uint32 {
	if x != nil {
		return x.DstCid
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetSrcAddrAnon() LegacyEnrichedFlow_AnonymizedType {
	if x != nil {
		return x.SrcAddrAnon
	}
	return LegacyEnrichedFlow_NotAnonymized
}

func (x *LegacyEnrichedFlow) GetDstAddrAnon() LegacyEnrichedFlow_AnonymizedType {
	if x != nil {
		return x.DstAddrAnon
	}
	return LegacyEnrichedFlow_NotAnonymized
}

func (x *LegacyEnrichedFlow) GetSrcAddrPreservedLen() uint32 {
	if x != nil {
		return x.SrcAddrPreservedLen
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetDstAddrPreservedLen() uint32 {
	if x != nil {
		return x.DstAddrPreservedLen
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetSamplerAddrAnon() LegacyEnrichedFlow_AnonymizedType {
	if x != nil {
		return x.SamplerAddrAnon
	}
	return LegacyEnrichedFlow_NotAnonymized
}

func (x *LegacyEnrichedFlow) GetSamplerAddrAnonPreservedPrefixLen() uint32 {
	if x != nil {
		return x.SamplerAddrAnonPreservedPrefixLen
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetASPath() []uint32 {
	if x != nil {
		return x.ASPath
	}
	return nil
}

func (x *LegacyEnrichedFlow) GetMed() uint32 {
	if x != nil {
		return x.Med
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetLocalPref() uint32 {
	if x != nil {
		return x.LocalPref
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetValidationStatus() LegacyEnrichedFlow_ValidationStatusType {
	if x != nil {
		return x.ValidationStatus
	}
	return LegacyEnrichedFlow_Unknown
}

func (x *LegacyEnrichedFlow) GetRemoteCountry() string {
	if x != nil {
		return x.RemoteCountry
	}
	return ""
}

func (x *LegacyEnrichedFlow) GetSrcCountry() string {
	if x != nil {
		return x.SrcCountry
	}
	return ""
}

func (x *LegacyEnrichedFlow) GetDstCountry() string {
	if x != nil {
		return x.DstCountry
	}
	return ""
}

func (x *LegacyEnrichedFlow) GetNormalized() LegacyEnrichedFlow_NormalizedType {
	if x != nil {
		return x.Normalized
	}
	return LegacyEnrichedFlow_No
}

func (x *LegacyEnrichedFlow) GetProtoName() string {
	if x != nil {
		return x.ProtoName
	}
	return ""
}

func (x *LegacyEnrichedFlow) GetRemoteAddr() LegacyEnrichedFlow_RemoteAddrType {
	if x != nil {
		return x.RemoteAddr
	}
	return LegacyEnrichedFlow_Neither
}

func (x *LegacyEnrichedFlow) GetSrcHostName() string {
	if x != nil {
		return x.SrcHostName
	}
	return ""
}

func (x *LegacyEnrichedFlow) GetDstHostName() string {
	if x != nil {
		return x.DstHostName
	}
	return ""
}

func (x *LegacyEnrichedFlow) GetNextHopHostName() string {
	if x != nil {
		return x.NextHopHostName
	}
	return ""
}

func (x *LegacyEnrichedFlow) GetSrcASName() string {
	if x != nil {
		return x.SrcASName
	}
	return ""
}

func (x *LegacyEnrichedFlow) GetDstASName() string {
	if x != nil {
		return x.DstASName
	}
	return ""
}

func (x *LegacyEnrichedFlow) GetNextHopASName() string {
	if x != nil {
		return x.NextHopASName
	}
	return ""
}

func (x *LegacyEnrichedFlow) GetSamplerHostName() string {
	if x != nil {
		return x.SamplerHostName
	}
	return ""
}

func (x *LegacyEnrichedFlow) GetSrcIfName() string {
	if x != nil {
		return x.SrcIfName
	}
	return ""
}

func (x *LegacyEnrichedFlow) GetSrcIfDesc() string {
	if x != nil {
		return x.SrcIfDesc
	}
	return ""
}

func (x *LegacyEnrichedFlow) GetSrcIfSpeed() uint32 {
	if x != nil {
		return x.SrcIfSpeed
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetDstIfName() string {
	if x != nil {
		return x.DstIfName
	}
	return ""
}

func (x *LegacyEnrichedFlow) GetDstIfDesc() string {
	if x != nil {
		return x.DstIfDesc
	}
	return ""
}

func (x *LegacyEnrichedFlow) GetDstIfSpeed() uint32 {
	if x != nil {
		return x.DstIfSpeed
	}
	return 0
}

func (x *LegacyEnrichedFlow) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *LegacyEnrichedFlow) GetSourceIP() string {
	if x != nil {
		return x.SourceIP
	}
	return ""
}

func (x *LegacyEnrichedFlow) GetDestinationIP() string {
	if x != nil {
		return x.DestinationIP
	}
	return ""
}

func (x *LegacyEnrichedFlow) GetNextHopIP() string {
	if x != nil {
		return x.NextHopIP
	}
	return ""
}

func (x *LegacyEnrichedFlow) GetSamplerIP() string {
	if x != nil {
		return x.SamplerIP
	}
	return ""
}

func (x *LegacyEnrichedFlow) GetSourceMAC() string {
	if x != nil {
		return x.SourceMAC
	}
	return ""
}

func (x *LegacyEnrichedFlow) GetDestinationMAC() string {
	if x != nil {
		return x.DestinationMAC
	}
	return ""
}

var File_legacyenrichedflow_proto protoreflect.FileDescriptor

var file_legacyenrichedflow_proto_rawDesc = []byte{
	0x0a, 0x18, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x65, 0x64,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x66, 0x6c, 0x6f, 0x77,
	0x70, 0x62, 0x22, 0xa1, 0x23, 0x0a, 0x12, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x45, 0x6e, 0x72,
	0x69, 0x63, 0x68, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x37, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x70, 0x62,
	0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x65, 0x64, 0x46,
	0x6c, 0x6f, 0x77, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x53, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x46, 0x6c, 0x6f, 0x77, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x46, 0x6c, 0x6f, 0x77, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x69,
	0x6d, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0d, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x6e, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x45,
	0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x72, 0x63, 0x41, 0x64, 0x64, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x53, 0x72, 0x63, 0x41, 0x64, 0x64, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x44, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x44,
	0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x45, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x53, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x44, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x44,
	0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x49, 0x66, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x49, 0x6e, 0x49, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x4f, 0x75,
	0x74, 0x49, 0x66, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4f, 0x75, 0x74, 0x49, 0x66,
	0x12, 0x16, 0x0a, 0x06, 0x53, 0x72, 0x63, 0x4d, 0x61, 0x63, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x53, 0x72, 0x63, 0x4d, 0x61, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x73, 0x74, 0x4d,
	0x61, 0x63, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x44, 0x73, 0x74, 0x4d, 0x61, 0x63,
	0x12, 0x18, 0x0a, 0x07, 0x53, 0x72, 0x63, 0x56, 0x6c, 0x61, 0x6e, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x53, 0x72, 0x63, 0x56, 0x6c, 0x61, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x73,
	0x74, 0x56, 0x6c, 0x61, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x44, 0x73, 0x74,
	0x56, 0x6c, 0x61, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x56, 0x72, 0x66, 0x49, 0x44, 0x18, 0x27, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x56, 0x72, 0x66, 0x49, 0x44,
	0x12, 0x20, 0x0a, 0x0b, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x56, 0x72, 0x66, 0x49, 0x44, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x56, 0x72, 0x66,
	0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x50, 0x54, 0x6f, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x49, 0x50, 0x54, 0x6f, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x46, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x50, 0x54, 0x54, 0x4c, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x49, 0x50, 0x54, 0x54, 0x4c, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x43,
	0x50, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x54, 0x43,
	0x50, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x63, 0x6d, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x49, 0x63, 0x6d, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x63, 0x6d, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x49, 0x63, 0x6d, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x49, 0x50, 0x76, 0x36, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x25, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x49, 0x50, 0x76, 0x36, 0x46, 0x6c, 0x6f, 0x77, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x46, 0x72,
	0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x28, 0x0a, 0x0f,
	0x42, 0x69, 0x46, 0x6c, 0x6f, 0x77, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x29, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x42, 0x69, 0x46, 0x6c, 0x6f, 0x77, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x72, 0x63, 0x41, 0x53, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x53, 0x72, 0x63, 0x41, 0x53, 0x12, 0x14, 0x0a, 0x05,
	0x44, 0x73, 0x74, 0x41, 0x53, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x44, 0x73, 0x74,
	0x41, 0x53, 0x12, 0x18, 0x0a, 0x07, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x12, 0x1c, 0x0a, 0x09,
	0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x41, 0x53, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x41, 0x53, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x72,
	0x63, 0x4e, 0x65, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x53, 0x72, 0x63, 0x4e,
	0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x44, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x48, 0x61,
	0x73, 0x4d, 0x50, 0x4c, 0x53, 0x18, 0x35, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x48, 0x61, 0x73,
	0x4d, 0x50, 0x4c, 0x53, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x50, 0x4c, 0x53, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x4d, 0x50, 0x4c, 0x53, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x50, 0x4c, 0x53, 0x31, 0x54, 0x54, 0x4c, 0x18, 0x37,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x4d, 0x50, 0x4c, 0x53, 0x31, 0x54, 0x54, 0x4c, 0x12, 0x1e,
	0x0a, 0x0a, 0x4d, 0x50, 0x4c, 0x53, 0x31, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x38, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x4d, 0x50, 0x4c, 0x53, 0x31, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x4d, 0x50, 0x4c, 0x53, 0x32, 0x54, 0x54, 0x4c, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x4d, 0x50, 0x4c, 0x53, 0x32, 0x54, 0x54, 0x4c, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x50,
	0x4c, 0x53, 0x32, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x4d, 0x50, 0x4c, 0x53, 0x32, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x50,
	0x4c, 0x53, 0x33, 0x54, 0x54, 0x4c, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x4d, 0x50,
	0x4c, 0x53, 0x33, 0x54, 0x54, 0x4c, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x50, 0x4c, 0x53, 0x33, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x4d, 0x50, 0x4c, 0x53,
	0x33, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x50, 0x4c, 0x53, 0x4c, 0x61,
	0x73, 0x74, 0x54, 0x54, 0x4c, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x4d, 0x50, 0x4c,
	0x53, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x54, 0x4c, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x50, 0x4c, 0x53,
	0x4c, 0x61, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x4d, 0x50, 0x4c, 0x53, 0x4c, 0x61, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x27,
	0x0a, 0x0e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x69, 0x6e,
	0x18, 0xcc, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x4d, 0x69, 0x6e, 0x12, 0x27, 0x0a, 0x0e, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x61, 0x78, 0x18, 0xcd, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x61, 0x78,
	0x12, 0x29, 0x0a, 0x0f, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d,
	0x65, 0x61, 0x6e, 0x18, 0xce, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x61, 0x6e, 0x12, 0x2d, 0x0a, 0x11, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x53, 0x74, 0x64, 0x44, 0x65, 0x76,
	0x18, 0xcf, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x53, 0x74, 0x64, 0x44, 0x65, 0x76, 0x12, 0x23, 0x0a, 0x0c, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x49, 0x41, 0x54, 0x4d, 0x69, 0x6e, 0x18, 0xd6, 0x08, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0c, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x41, 0x54, 0x4d, 0x69, 0x6e, 0x12,
	0x23, 0x0a, 0x0c, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x41, 0x54, 0x4d, 0x61, 0x78, 0x18,
	0xd7, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x41,
	0x54, 0x4d, 0x61, 0x78, 0x12, 0x25, 0x0a, 0x0d, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x41,
	0x54, 0x4d, 0x65, 0x61, 0x6e, 0x18, 0xd8, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x49, 0x41, 0x54, 0x4d, 0x65, 0x61, 0x6e, 0x12, 0x29, 0x0a, 0x0f, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x41, 0x54, 0x53, 0x74, 0x64, 0x44, 0x65, 0x76, 0x18, 0xd9,
	0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x41, 0x54,
	0x53, 0x74, 0x64, 0x44, 0x65, 0x76, 0x12, 0x21, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0xe0, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0c, 0x46, 0x49, 0x4e,
	0x46, 0x6c, 0x61, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xea, 0x08, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0c, 0x46, 0x49, 0x4e, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23,
	0x0a, 0x0c, 0x53, 0x59, 0x4e, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xeb,
	0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x53, 0x59, 0x4e, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0c, 0x52, 0x53, 0x54, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0xec, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x52, 0x53, 0x54, 0x46,
	0x6c, 0x61, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0c, 0x50, 0x53, 0x48, 0x46,
	0x6c, 0x61, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xed, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0c, 0x50, 0x53, 0x48, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a,
	0x0c, 0x41, 0x43, 0x4b, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xee, 0x08,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x41, 0x43, 0x4b, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0c, 0x55, 0x52, 0x47, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0xef, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x55, 0x52, 0x47, 0x46, 0x6c,
	0x61, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0c, 0x43, 0x57, 0x52, 0x46, 0x6c,
	0x61, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xf0, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x43, 0x57, 0x52, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0c,
	0x45, 0x43, 0x45, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xf1, 0x08, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0c, 0x45, 0x43, 0x45, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x27, 0x0a, 0x0e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x18, 0xf4, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0d, 0x54, 0x69,
	0x6d, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x69, 0x6e, 0x18, 0xfe, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0d, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x69,
	0x6e, 0x12, 0x25, 0x0a, 0x0d, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d,
	0x61, 0x78, 0x18, 0xff, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x54, 0x69, 0x6d, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x27, 0x0a, 0x0e, 0x54, 0x69, 0x6d, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x61, 0x6e, 0x18, 0x80, 0x09, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0e, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x61,
	0x6e, 0x12, 0x2b, 0x0a, 0x10, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53,
	0x74, 0x64, 0x44, 0x65, 0x76, 0x18, 0x81, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x54, 0x69,
	0x6d, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x64, 0x44, 0x65, 0x76, 0x12, 0x21,
	0x0a, 0x0b, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x6c, 0x65, 0x4d, 0x69, 0x6e, 0x18, 0x82, 0x09,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x6c, 0x65, 0x4d, 0x69,
	0x6e, 0x12, 0x21, 0x0a, 0x0b, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x6c, 0x65, 0x4d, 0x61, 0x78,
	0x18, 0x83, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x6c,
	0x65, 0x4d, 0x61, 0x78, 0x12, 0x23, 0x0a, 0x0c, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x6c, 0x65,
	0x4d, 0x65, 0x61, 0x6e, 0x18, 0x84, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x54, 0x69, 0x6d,
	0x65, 0x49, 0x64, 0x6c, 0x65, 0x4d, 0x65, 0x61, 0x6e, 0x12, 0x27, 0x0a, 0x0e, 0x54, 0x69, 0x6d,
	0x65, 0x49, 0x64, 0x6c, 0x65, 0x53, 0x74, 0x64, 0x44, 0x65, 0x76, 0x18, 0x85, 0x09, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x6c, 0x65, 0x53, 0x74, 0x64, 0x44,
	0x65, 0x76, 0x12, 0x11, 0x0a, 0x03, 0x43, 0x69, 0x64, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x43, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x09, 0x43, 0x69, 0x64, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x69, 0x64, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x17, 0x0a, 0x06, 0x53, 0x72, 0x63, 0x43, 0x69, 0x64, 0x18, 0xf4,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x53, 0x72, 0x63, 0x43, 0x69, 0x64, 0x12, 0x17, 0x0a,
	0x06, 0x44, 0x73, 0x74, 0x43, 0x69, 0x64, 0x18, 0xf5, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x44, 0x73, 0x74, 0x43, 0x69, 0x64, 0x12, 0x4c, 0x0a, 0x0b, 0x53, 0x72, 0x63, 0x41, 0x64, 0x64,
	0x72, 0x41, 0x6e, 0x6f, 0x6e, 0x18, 0x88, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x66,
	0x6c, 0x6f, 0x77, 0x70, 0x62, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x45, 0x6e, 0x72, 0x69,
	0x63, 0x68, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x2e, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x69,
	0x7a, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x53, 0x72, 0x63, 0x41, 0x64, 0x64, 0x72,
	0x41, 0x6e, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x0b, 0x44, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x41,
	0x6e, 0x6f, 0x6e, 0x18, 0x89, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x66, 0x6c, 0x6f,
	0x77, 0x70, 0x62, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68,
	0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x2e, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x69, 0x7a, 0x65,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x44, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x41, 0x6e,
	0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x13, 0x53, 0x72, 0x63, 0x41, 0x64, 0x64, 0x72, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x4c, 0x65, 0x6e, 0x18, 0x8a, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x13, 0x53, 0x72, 0x63, 0x41, 0x64, 0x64, 0x72, 0x50, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x4c, 0x65, 0x6e, 0x12, 0x31, 0x0a, 0x13, 0x44, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x4c, 0x65, 0x6e, 0x18, 0x8b, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x13, 0x44, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x4c, 0x65, 0x6e, 0x12, 0x54, 0x0a, 0x0f, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x41, 0x6e, 0x6f, 0x6e, 0x18, 0x8c, 0x09, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x29, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x70, 0x62, 0x2e, 0x4c, 0x65, 0x67, 0x61,
	0x63, 0x79, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x2e, 0x41,
	0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x41, 0x6e, 0x6f, 0x6e, 0x12, 0x4d,
	0x0a, 0x21, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x41, 0x6e, 0x6f,
	0x6e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x4c, 0x65, 0x6e, 0x18, 0x8d, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x21, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x41, 0x6e, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x12, 0x17, 0x0a,
	0x06, 0x41, 0x53, 0x50, 0x61, 0x74, 0x68, 0x18, 0x93, 0x09, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06,
	0x41, 0x53, 0x50, 0x61, 0x74, 0x68, 0x12, 0x11, 0x0a, 0x03, 0x4d, 0x65, 0x64, 0x18, 0x94, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x4d, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x09, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x50, 0x72, 0x65, 0x66, 0x18, 0x95, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x66, 0x12, 0x5c, 0x0a, 0x10, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x96, 0x09, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x70, 0x62, 0x2e, 0x4c, 0x65, 0x67,
	0x61, 0x63, 0x79, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x2e,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0xf2, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1f, 0x0a,
	0x0a, 0x53, 0x72, 0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0xf6, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x53, 0x72, 0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1f,
	0x0a, 0x0a, 0x44, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0xf7, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x4a, 0x0a, 0x0a, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0xea, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x70, 0x62, 0x2e, 0x4c, 0x65,
	0x67, 0x61, 0x63, 0x79, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77,
	0x2e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0a, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x09, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0xf1, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x18, 0xf3, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x29, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x70, 0x62, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x45,
	0x6e, 0x72, 0x69, 0x63, 0x68, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x21, 0x0a, 0x0b, 0x53, 0x72, 0x63, 0x48, 0x6f, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x9c, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x72,
	0x63, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x44, 0x73, 0x74,
	0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x9d, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x44, 0x73, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x0f,
	0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x9e, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x48,
	0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x53, 0x72, 0x63, 0x41, 0x53,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x9f, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x72, 0x63,
	0x41, 0x53, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x44, 0x73, 0x74, 0x41, 0x53, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0xa0, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x44, 0x73, 0x74, 0x41,
	0x53, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70,
	0x41, 0x53, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0xa1, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4e,
	0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x41, 0x53, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x0f,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0xa2, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x48,
	0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x53, 0x72, 0x63, 0x49, 0x66,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0xeb, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x72, 0x63,
	0x49, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x53, 0x72, 0x63, 0x49, 0x66, 0x44,
	0x65, 0x73, 0x63, 0x18, 0xec, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x72, 0x63, 0x49,
	0x66, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1f, 0x0a, 0x0a, 0x53, 0x72, 0x63, 0x49, 0x66, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x18, 0xed, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x53, 0x72, 0x63, 0x49,
	0x66, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x09, 0x44, 0x73, 0x74, 0x49, 0x66, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0xee, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x44, 0x73, 0x74, 0x49,
	0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x44, 0x73, 0x74, 0x49, 0x66, 0x44, 0x65,
	0x73, 0x63, 0x18, 0xef, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x44, 0x73, 0x74, 0x49, 0x66,
	0x44, 0x65, 0x73, 0x63, 0x12, 0x1f, 0x0a, 0x0a, 0x44, 0x73, 0x74, 0x49, 0x66, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x18, 0xf0, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x44, 0x73, 0x74, 0x49, 0x66,
	0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x13, 0x0a, 0x04, 0x4e, 0x6f, 0x74, 0x65, 0x18, 0xf8, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x08, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x50, 0x18, 0x8a, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x50, 0x12, 0x25, 0x0a, 0x0d, 0x44, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x50, 0x18, 0x8b, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x50, 0x12, 0x1d,
	0x0a, 0x09, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x49, 0x50, 0x18, 0x8c, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x49, 0x50, 0x12, 0x1d, 0x0a,
	0x09, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x49, 0x50, 0x18, 0x8d, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x49, 0x50, 0x12, 0x1d, 0x0a, 0x09,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x41, 0x43, 0x18, 0x8e, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x41, 0x43, 0x12, 0x27, 0x0a, 0x0e, 0x44,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x41, 0x43, 0x18, 0x8f, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x41, 0x43, 0x22, 0x5d, 0x0a, 0x08, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x4c, 0x4f, 0x57, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x35, 0x10, 0x01, 0x12, 0x0e,
	0x0a, 0x0a, 0x4e, 0x45, 0x54, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x56, 0x35, 0x10, 0x02, 0x12, 0x0e,
	0x0a, 0x0a, 0x4e, 0x45, 0x54, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x56, 0x39, 0x10, 0x03, 0x12, 0x09,
	0x0a, 0x05, 0x49, 0x50, 0x46, 0x49, 0x58, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x42, 0x50,
	0x46, 0x10, 0x05, 0x22, 0x32, 0x0a, 0x0e, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x69, 0x7a, 0x65,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x6f, 0x74, 0x41, 0x6e, 0x6f, 0x6e,
	0x79, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x50, 0x41, 0x4e, 0x10, 0x01, 0x22, 0x49, 0x0a, 0x14, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x6f, 0x74, 0x46, 0x6f,
	0x75, 0x6e, 0x64, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x10, 0x03, 0x22, 0x21, 0x0a, 0x0e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x4e, 0x6f, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03,
	0x59, 0x65, 0x73, 0x10, 0x01, 0x22, 0x2f, 0x0a, 0x0e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x65, 0x69, 0x74, 0x68,
	0x65, 0x72, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x72, 0x63, 0x10, 0x01, 0x12, 0x07, 0x0a,
	0x03, 0x44, 0x73, 0x74, 0x10, 0x02, 0x42, 0x27, 0x5a, 0x25, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x77, 0x4e, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x2f, 0x66,
	0x6c, 0x6f, 0x77, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x70, 0x62, 0x3b, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_legacyenrichedflow_proto_rawDescOnce sync.Once
	file_legacyenrichedflow_proto_rawDescData = file_legacyenrichedflow_proto_rawDesc
)

func file_legacyenrichedflow_proto_rawDescGZIP() []byte {
	file_legacyenrichedflow_proto_rawDescOnce.Do(func() {
		file_legacyenrichedflow_proto_rawDescData = protoimpl.X.CompressGZIP(file_legacyenrichedflow_proto_rawDescData)
	})
	return file_legacyenrichedflow_proto_rawDescData
}

var file_legacyenrichedflow_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_legacyenrichedflow_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_legacyenrichedflow_proto_goTypes = []any{
	(LegacyEnrichedFlow_FlowType)(0),             // 0: flowpb.LegacyEnrichedFlow.FlowType
	(LegacyEnrichedFlow_AnonymizedType)(0),       // 1: flowpb.LegacyEnrichedFlow.AnonymizedType
	(LegacyEnrichedFlow_ValidationStatusType)(0), // 2: flowpb.LegacyEnrichedFlow.ValidationStatusType
	(LegacyEnrichedFlow_NormalizedType)(0),       // 3: flowpb.LegacyEnrichedFlow.NormalizedType
	(LegacyEnrichedFlow_RemoteAddrType)(0),       // 4: flowpb.LegacyEnrichedFlow.RemoteAddrType
	(*LegacyEnrichedFlow)(nil),                   // 5: flowpb.LegacyEnrichedFlow
}
var file_legacyenrichedflow_proto_depIdxs = []int32{
	0, // 0: flowpb.LegacyEnrichedFlow.Type:type_name -> flowpb.LegacyEnrichedFlow.FlowType
	1, // 1: flowpb.LegacyEnrichedFlow.SrcAddrAnon:type_name -> flowpb.LegacyEnrichedFlow.AnonymizedType
	1, // 2: flowpb.LegacyEnrichedFlow.DstAddrAnon:type_name -> flowpb.LegacyEnrichedFlow.AnonymizedType
	1, // 3: flowpb.LegacyEnrichedFlow.SamplerAddrAnon:type_name -> flowpb.LegacyEnrichedFlow.AnonymizedType
	2, // 4: flowpb.LegacyEnrichedFlow.ValidationStatus:type_name -> flowpb.LegacyEnrichedFlow.ValidationStatusType
	3, // 5: flowpb.LegacyEnrichedFlow.Normalized:type_name -> flowpb.LegacyEnrichedFlow.NormalizedType
	4, // 6: flowpb.LegacyEnrichedFlow.RemoteAddr:type_name -> flowpb.LegacyEnrichedFlow.RemoteAddrType
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_legacyenrichedflow_proto_init() }
func file_legacyenrichedflow_proto_init() {
	if File_legacyenrichedflow_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_legacyenrichedflow_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_legacyenrichedflow_proto_goTypes,
		DependencyIndexes: file_legacyenrichedflow_proto_depIdxs,
		EnumInfos:         file_legacyenrichedflow_proto_enumTypes,
		MessageInfos:      file_legacyenrichedflow_proto_msgTypes,
	}.Build()
	File_legacyenrichedflow_proto = out.File
	file_legacyenrichedflow_proto_rawDesc = nil
	file_legacyenrichedflow_proto_goTypes = nil
	file_legacyenrichedflow_proto_depIdxs = nil
}
